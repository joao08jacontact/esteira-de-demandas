Perfeito ‚Äî as vari√°veis est√£o no Vercel üëç
Agora √© s√≥ garantir que os nomes usados no c√≥digo batem com os da Vercel e que existe uma pasta api/ na raiz do reposit√≥rio (o teu app √© Vite/React est√°tico; se n√£o houver api/, o Vercel devolve 404).

Abaixo vai um kit m√≠nimo de rotas Serverless para GLPI usando os mesmos nomes que voc√™ j√° criou (GLPI_API_URL, GLPI_APP_TOKEN, GLPI_USER_TOKEN). Copie esses arquivos para a raiz do repo esteira-de-demandas/:

1) /api/_glpi.ts (utilit√°rio de sess√£o)
// api/_glpi.ts
import type { VercelRequest } from '@vercel/node';

const BASE = process.env.GLPI_API_URL!;        // <- igual ao Vercel
const APP  = process.env.GLPI_APP_TOKEN!;
const USER = process.env.GLPI_USER_TOKEN!;

export async function glpiFetch(path: string, init: RequestInit = {}) {
  if (!BASE || !APP || !USER) {
    throw new Error('GLPI env vars ausentes (GLPI_API_URL, GLPI_APP_TOKEN, GLPI_USER_TOKEN)');
  }

  // 1) abre sess√£o
  const initResp = await fetch(`${BASE}/initSession`, {
    method: 'GET',
    headers: { 'App-Token': APP, 'Authorization': `user_token ${USER}` },
  });
  if (!initResp.ok) throw new Error(`initSession falhou: ${initResp.status}`);
  const { session_token } = await initResp.json();

  // 2) chamada real
  const headers: Record<string,string> = {
    'App-Token': APP,
    'Session-Token': session_token,
    'Content-Type': 'application/json',
  };
  if (init.headers) for (const [k,v] of Object.entries(init.headers as any)) headers[k] = v as string;

  const resp = await fetch(`${BASE}${path}`, { ...init, headers });

  // 3) encerra sess√£o (best-effort)
  fetch(`${BASE}/killSession`, {
    method: 'GET',
    headers: { 'App-Token': APP, 'Session-Token': session_token },
  }).catch(()=>{});

  return resp;
}

export function getRange(page=1, limit=20) {
  const start = (page - 1) * limit;
  const end   = start + limit - 1; // GLPI usa range inclusivo
  return `${start}-${end}`;
}

2) /api/tickets.ts
// api/tickets.ts
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { glpiFetch, getRange } from './_glpi';

export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    const page  = Number(req.query.page ?? 1);
    const limit = Number(req.query.limit ?? 20);
    const range = getRange(page, limit);

    // Search em Ticket para pagina√ß√£o
    const r = await glpiFetch(`/search/Ticket?range=${range}`);
    const data = await r.json();

    res.status(200).json({
      page, limit,
      total: data?.totalcount ?? data?.totalcountwithouthidden ?? undefined,
      items: data?.data ?? data, // vers√µes variam
    });
  } catch (e:any) {
    res.status(500).json({ error: e.message });
  }
}

3) /api/tickets/stats.ts
// api/tickets/stats.ts
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { glpiFetch } from '../_glpi';

export default async function handler(_req: VercelRequest, res: VercelResponse) {
  try {
    // Exemplo: conta por status (campo 2 normalmente √© status no /search)
    const r = await glpiFetch(`/search/Ticket?forcedisplay[0]=2`);
    const data = await r.json();
    const rows = data?.data ?? data ?? [];

    const stats: Record<string, number> = {};
    for (const row of rows) {
      const status = row?.['2'] ?? row?.status ?? 'desconhecido';
      stats[status] = (stats[status] ?? 0) + 1;
    }
    res.status(200).json(stats);
  } catch (e:any) {
    res.status(500).json({ error: e.message });
  }
}

4) /api/categories.ts
// api/categories.ts
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { glpiFetch } from './_glpi';

export default async function handler(_req: VercelRequest, res: VercelResponse) {
  try {
    const r = await glpiFetch(`/ITILCategory`);
    const data = await r.json();
    res.status(200).json(data);
  } catch (e:any) {
    res.status(500).json({ error: e.message });
  }
}

5) /api/users.ts
// api/users.ts
import type { VercelRequest, VercelResponse } from '@vercel/node';
import { glpiFetch, getRange } from './_glpi';

export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    const page  = Number(req.query.page ?? 1);
    const limit = Number(req.query.limit ?? 50);
    const range = getRange(page, limit);

    const r = await glpiFetch(`/search/User?range=${range}`);
    const data = await r.json();
    res.status(200).json({ page, limit, items: data?.data ?? data });
  } catch (e:any) {
    res.status(500).json({ error: e.message });
  }
}

6) (Opcional) /api/health.ts ‚Äî teste r√°pido
// api/health.ts
import type { VercelRequest, VercelResponse } from '@vercel/node';

export default async function handler(_req: VercelRequest, res: VercelResponse) {
  const ok =
    !!process.env.GLPI_API_URL &&
    !!process.env.GLPI_APP_TOKEN &&
    !!process.env.GLPI_USER_TOKEN;
  res.status(ok ? 200 : 500).json({
    ok,
    has: {
      GLPI_API_URL: !!process.env.GLPI_API_URL,
      GLPI_APP_TOKEN: !!process.env.GLPI_APP_TOKEN,
      GLPI_USER_TOKEN: !!process.env.GLPI_USER_TOKEN,
    },
  });
}

Ajuste no front (Vite)

No teu c√≥digo que faz fetch, deixe a base assim:

const API_BASE = import.meta.env.VITE_API_BASE_URL || '/api';

export async function apiGet(path: string) {
  const r = await fetch(`${API_BASE}${path}`);
  if (!r.ok) throw new Error(`${r.status} ${r.statusText}`);
  return r.json();
}

// exemplos:
apiGet('/tickets?page=1&limit=20');
apiGet('/tickets/stats?limit=20');
apiGet('/categories');
apiGet('/users');


Em produ√ß√£o (Vercel), n√£o defina VITE_API_BASE_URL para manter /api.
Em dev local, se precisar apontar para produ√ß√£o: crie .env.local com
VITE_API_BASE_URL=https://esteira-de-demandas.vercel.app/api.

Se rodar Vite local e quiser proxy para um GLPI direto, posso te mandar um vite.config.ts com server.proxy.

Checklist para matar os 404

Pastas/arquivos acima criados em api/‚Ä¶ (na raiz do repo).

Vari√°veis de ambiente j√° est√£o OK (bate com o print).

Depois de commit + push, fa√ßa um redeploy no Vercel.

Teste:

GET https://‚Ä¶vercel.app/api/health ‚Üí deve retornar { ok: true, ‚Ä¶ }

GET https://‚Ä¶vercel.app/api/tickets?page=1&limit=20 ‚Üí deve vir JSON (n√£o 404)

O console do navegador deixa de logar 404 das rotas /api/....

Se preferir usar proxy gen√©rico para outro backend (em vez de GLPI direto), te envio o [...path].ts ajustado para BACKEND_BASE_URL. Quer que eu j√° crie um PR com esses arquivos na tua repo?