{"file_contents":{"attached_assets/tailwind.config_1760837559260.js":{"content":"export default {\n  content: [\"./index.html\", \"./src/**/*.{ts,tsx}\"],\n  theme: { extend: {} },\n  plugins: [],\n}\n","size_bytes":111},"attached_assets/index_1760837559260.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root { color-scheme: dark; }\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n  overflow: hidden;\n}\n","size_bytes":209},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"design_guidelines.md":{"content":"# Design Guidelines: Unified Application Platform\n\n## Design Approach: Material Design System\n**Rationale**: Data-heavy productivity tool requiring clear hierarchy, robust component patterns, and excellent visual feedback for form interactions and real-time updates.\n\n## Core Design Principles\n- **Clarity Over Decoration**: Prioritize readability and quick information scanning\n- **Consistent Patterns**: Maintain uniform UI across all three modules for seamless transitions\n- **Functional Aesthetics**: Clean, professional interface that enhances productivity\n- **Visual Feedback**: Clear states for interactive elements (active module, loading, success/error)\n\n## Color Palette\n\n**Dark Mode (Primary)**\n- Background: 217 33% 10% (deep slate)\n- Surface: 217 33% 14% (elevated slate)\n- Primary: 217 90% 60% (vibrant blue)\n- Primary Variant: 217 80% 50% (darker blue)\n- Text Primary: 0 0% 98%\n- Text Secondary: 217 20% 70%\n- Border: 217 30% 22%\n- Success: 142 70% 45%\n- Error: 0 72% 55%\n\n**Light Mode**\n- Background: 0 0% 98%\n- Surface: 0 0% 100%\n- Primary: 217 90% 50%\n- Text Primary: 217 33% 17%\n- Text Secondary: 217 25% 45%\n- Border: 217 30% 88%\n\n## Typography\n**Font Family**: Inter via Google Fonts (clean, professional, excellent readability for data)\n- Headings: 600 weight\n- Module Titles: 24px (text-2xl)\n- Section Headers: 18px (text-lg)\n- Body Text: 14px (text-sm)\n- Data Tables: 13px (text-xs to text-sm)\n- Labels: 12px (text-xs), 500 weight\n\n## Layout System\n**Spacing Primitives**: Tailwind units of 2, 4, 6, and 8\n- Component padding: p-4 or p-6\n- Section spacing: space-y-6\n- Card gaps: gap-4\n- Module content margins: m-6 or m-8\n- Dense data layouts: gap-2\n\n**Container Structure**:\n- Navigation sidebar: Fixed width 260px (w-64)\n- Main content area: Remaining width with max-w-7xl padding\n- Responsive breakpoint: Collapse to top bar on mobile (< md)\n\n## Navigation Architecture\n\n**Fixed Sidebar (Desktop)**\n- Left-aligned vertical navigation\n- Company logo/app name at top\n- Three module buttons with icons:\n  - Esteira de Demandas (primary - home icon)\n  - DashRealtime (chart icon)\n  - BICadastro (users icon)\n- Active state: Primary color background, bold text\n- Hover state: Subtle background change\n- Each button shows icon + label\n\n**Mobile Header Bar**\n- Hamburger menu revealing drawer with same three options\n- Current module name displayed in center\n- Drawer slides from left, overlays content\n\n## Component Library\n\n**Data Tables**\n- Striped rows for better scanning (alternating background)\n- Sticky header on scroll\n- Hover highlight on rows\n- Sortable columns with arrow indicators\n- Pagination controls at bottom\n- Borders: subtle dividers between columns\n\n**Forms**\n- Consistent input styling across modules\n- Labels above inputs\n- Helper text below for guidance\n- Clear error states with red text and border\n- Success feedback with green checkmark\n- Group related fields with subtle section dividers\n\n**Cards**\n- Elevated surfaces (subtle shadow in light mode, lighter background in dark)\n- Rounded corners (rounded-lg)\n- Consistent padding (p-6)\n- Header with title and optional actions\n\n**Buttons**\n- Primary: Filled with primary color\n- Secondary: Outline style\n- Disabled: Reduced opacity\n- Loading state: Spinner with disabled appearance\n\n**Dashboard Widgets (DashRealtime)**\n- KPI cards: Large number, label below, trend indicator\n- Chart containers: Card styling with title and time range selector\n- Grid layout: 2-3 columns on desktop, stack on mobile\n\n**Status Indicators**\n- Color-coded badges for workflow states\n- Dot indicators for real-time status\n- Progress bars for completion tracking\n\n## Module-Specific Considerations\n\n**Esteira de Demandas**\n- Kanban-style columns or table view toggle\n- Priority flags with color coding\n- Timeline/history section for each demand\n- Quick action buttons (edit, delete, status change)\n\n**DashRealtime**\n- Live data updates with subtle pulse animation\n- Refresh timestamp display\n- Auto-refresh toggle control\n- Metric comparison (current vs. previous period)\n\n**BICadastro**\n- Multi-step form wizard if applicable\n- Clear save/cancel actions\n- Confirmation dialogs for destructive actions\n- Search and filter controls for browsing records\n\n## Consistency Rules\n- All modules share exact same header/navigation styling\n- Forms use identical input components across modules\n- Tables maintain same styling and interaction patterns\n- Consistent spacing and typography throughout\n- Unified color usage for status indicators\n\n## Responsive Behavior\n- Desktop (lg+): Full sidebar navigation, multi-column layouts for tables/forms\n- Tablet (md): Collapsed navigation, 2-column grids reduce to 1\n- Mobile (base): Drawer navigation, single column, stack all elements vertically","size_bytes":4756},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/dashboard/dashboard-header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RefreshCw } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { formatTime } from \"@/lib/utils\";\n\ninterface DashboardHeaderProps {\n  lastUpdate: Date | null;\n  isRefreshing: boolean;\n  onRefresh: () => void;\n  autoRefresh: boolean;\n  onAutoRefreshChange: (enabled: boolean) => void;\n}\n\nexport function DashboardHeader({\n  lastUpdate,\n  isRefreshing,\n  onRefresh,\n  autoRefresh,\n  onAutoRefreshChange,\n}: DashboardHeaderProps) {\n  return (\n    <div className=\"border-b border-border bg-card\">\n      <div className=\"max-w-screen-2xl mx-auto px-6 lg:px-8 py-4\">\n        <div className=\"flex flex-wrap items-center justify-between gap-4\">\n          <div>\n            <h1 className=\"text-2xl font-semibold\">Dashboard GLPI</h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Monitoramento de tickets em tempo real\n            </p>\n          </div>\n\n          <div className=\"flex flex-wrap items-center gap-4\">\n            {lastUpdate && (\n              <div className=\"flex items-center gap-2\">\n                <Badge variant=\"outline\" data-testid=\"badge-last-update\">\n                  Última atualização: {formatTime(lastUpdate)}\n                </Badge>\n              </div>\n            )}\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"auto-refresh\"\n                checked={autoRefresh}\n                onCheckedChange={onAutoRefreshChange}\n                data-testid=\"switch-auto-refresh\"\n              />\n              <Label htmlFor=\"auto-refresh\" className=\"cursor-pointer text-sm\">\n                Atualização automática\n              </Label>\n            </div>\n\n            <Button\n              onClick={onRefresh}\n              disabled={isRefreshing}\n              size=\"sm\"\n              variant=\"outline\"\n              data-testid=\"button-refresh\"\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? \"animate-spin\" : \"\"}`} />\n              Atualizar\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2246},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"server/glpi-client.ts":{"content":"import axios, { AxiosInstance } from \"axios\";\n\ninterface GlpiConfig {\n  apiUrl: string;\n  userToken: string;\n  appToken: string;\n}\n\nexport class GlpiClient {\n  private client: AxiosInstance;\n  private sessionToken: string | null = null;\n\n  constructor(private config: GlpiConfig) {\n    this.client = axios.create({\n      baseURL: config.apiUrl,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"App-Token\": config.appToken,\n      },\n    });\n  }\n\n  async initSession(): Promise<string> {\n    try {\n      const response = await this.client.get(\"/initSession\", {\n        headers: {\n          Authorization: `user_token ${this.config.userToken}`,\n        },\n      });\n      this.sessionToken = response.data.session_token as string;\n      console.log(\"GLPI session initialized successfully\");\n      return this.sessionToken;\n    } catch (error: any) {\n      console.error(\"Failed to initialize GLPI session:\", error.response?.data || error.message);\n      throw new Error(\"Failed to authenticate with GLPI\");\n    }\n  }\n\n  async validateSession(): Promise<boolean> {\n    if (!this.sessionToken) {\n      return false;\n    }\n    \n    try {\n      await this.client.get(\"/getActiveProfile\", {\n        headers: {\n          \"Session-Token\": this.sessionToken,\n        },\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async ensureSession(): Promise<string> {\n    const isValid = await this.validateSession();\n    if (!isValid) {\n      console.log(\"Session invalid or expired, initializing new session...\");\n      await this.initSession();\n    }\n    return this.sessionToken!;\n  }\n\n  async killSession(): Promise<void> {\n    if (this.sessionToken) {\n      try {\n        await this.client.get(\"/killSession\", {\n          headers: {\n            \"Session-Token\": this.sessionToken,\n          },\n        });\n      } catch (error) {\n        console.error(\"Failed to kill GLPI session:\", error);\n      }\n      this.sessionToken = null;\n    }\n  }\n\n  async getTickets(params: {\n    range?: string;\n  } = {}): Promise<any[]> {\n    const sessionToken = await this.ensureSession();\n    \n    try {\n      const queryParams = new URLSearchParams();\n      if (params.range) queryParams.append(\"range\", params.range);\n      \n      let url = `/Ticket/?${queryParams.toString()}`;\n      \n      const response = await this.client.get(url, {\n        headers: {\n          \"Session-Token\": sessionToken,\n        },\n      });\n\n      return Array.isArray(response.data) ? response.data : [];\n    } catch (error: any) {\n      console.error(\"Failed to fetch tickets:\", error.response?.data || error.message);\n      // Session might be expired, try to reinitialize\n      if (error.response?.status === 401) {\n        this.sessionToken = null;\n        return this.getTickets(params);\n      }\n      throw error;\n    }\n  }\n\n  async getTicket(id: number): Promise<any> {\n    const sessionToken = await this.ensureSession();\n    \n    try {\n      const response = await this.client.get(`/Ticket/${id}`, {\n        headers: {\n          \"Session-Token\": sessionToken,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Failed to fetch ticket ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getCategories(): Promise<any[]> {\n    const sessionToken = await this.ensureSession();\n    \n    try {\n      const response = await this.client.get(\"/ITILCategory/?range=0-99\", {\n        headers: {\n          \"Session-Token\": sessionToken,\n        },\n      });\n      return Array.isArray(response.data) ? response.data : [];\n    } catch (error: any) {\n      console.error(\"Failed to fetch categories:\", error.response?.data || error.message);\n      if (error.response?.status === 401) {\n        this.sessionToken = null;\n        return this.getCategories();\n      }\n      throw error;\n    }\n  }\n\n  async getUsers(): Promise<any[]> {\n    const sessionToken = await this.ensureSession();\n    \n    try {\n      const response = await this.client.get(\"/User/?range=0-199\", {\n        headers: {\n          \"Session-Token\": sessionToken,\n        },\n      });\n      return Array.isArray(response.data) ? response.data : [];\n    } catch (error: any) {\n      console.error(\"Failed to fetch users:\", error.response?.data || error.message);\n      if (error.response?.status === 401) {\n        this.sessionToken = null;\n        return this.getUsers();\n      }\n      throw error;\n    }\n  }\n\n  async getGroups(): Promise<any[]> {\n    const sessionToken = await this.ensureSession();\n    \n    try {\n      const response = await this.client.get(\"/Group/?range=0-99\", {\n        headers: {\n          \"Session-Token\": sessionToken,\n        },\n      });\n      return Array.isArray(response.data) ? response.data : [];\n    } catch (error: any) {\n      console.error(\"Failed to fetch groups:\", error.response?.data || error.message);\n      if (error.response?.status === 401) {\n        this.sessionToken = null;\n        return this.getGroups();\n      }\n      throw error;\n    }\n  }\n}\n\n// Singleton instance\nlet glpiClient: GlpiClient | null = null;\n\nexport function getGlpiClient(): GlpiClient {\n  if (!glpiClient) {\n    const apiUrl = process.env.GLPI_API_URL;\n    const userToken = process.env.GLPI_USER_TOKEN;\n    const appToken = process.env.GLPI_APP_TOKEN;\n\n    if (!apiUrl || !userToken || !appToken) {\n      throw new Error(\n        \"Missing GLPI configuration. Please set GLPI_API_URL, GLPI_USER_TOKEN, and GLPI_APP_TOKEN environment variables.\"\n      );\n    }\n\n    glpiClient = new GlpiClient({\n      apiUrl,\n      userToken,\n      appToken,\n    });\n  }\n\n  return glpiClient;\n}\n","size_bytes":5608},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"attached_assets/useWorkspace_1760837559260.ts":{"content":"// src/lib/useWorkspace.ts\nimport { useMemo } from \"react\";\n\n/**\n * Lê o parâmetro ?ws= da URL e devolve um identificador\n * \"higienizado\" (minúsculas, sem espaços). Se não existir,\n * usa o fallback informado (ex.: \"demo\").\n */\nexport function useWorkspaceParam(fallback = \"demo\"): string {\n  const search =\n    typeof window !== \"undefined\" ? window.location.search : \"\";\n\n  return useMemo(() => {\n    try {\n      const usp = new URLSearchParams(search);\n      const raw = (usp.get(\"ws\") || fallback).trim();\n      // normaliza p/ ficar estável como chave\n      return raw.toLowerCase();\n    } catch {\n      return fallback;\n    }\n  }, [search, fallback]);\n}\n","size_bytes":667},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"attached_assets/main_1760837559260.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './index.css'\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n","size_bytes":232},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { ticketService } from \"./ticket-service\";\nimport { ticketFiltersSchema } from \"@shared/schema\";\nimport { getGlpiClient } from \"./glpi-client\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get categories from GLPI\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const glpiClient = getGlpiClient();\n      const categories = await glpiClient.getCategories();\n      \n      // Transform to simple format: { id, name }\n      const simplified = categories.map((cat: any) => ({\n        id: cat.id,\n        name: cat.completename || cat.name || `Category ${cat.id}`,\n      }));\n      \n      res.json(simplified);\n    } catch (error: any) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch categories\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get users (technicians) from GLPI\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const glpiClient = getGlpiClient();\n      const users = await glpiClient.getUsers();\n      \n      // Transform to simple format: { id, name }\n      const simplified = users\n        .filter((user: any) => user.is_active)\n        .map((user: any) => ({\n          id: user.id,\n          name: user.realname || user.name || `User ${user.id}`,\n        }));\n      \n      res.json(simplified);\n    } catch (error: any) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch users\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get groups from GLPI\n  app.get(\"/api/groups\", async (req, res) => {\n    try {\n      const glpiClient = getGlpiClient();\n      const groups = await glpiClient.getGroups();\n      \n      // Transform to simple format: { id, name }\n      const simplified = groups.map((group: any) => ({\n        id: group.id,\n        name: group.name || group.completename || `Group ${group.id}`,\n      }));\n      \n      res.json(simplified);\n    } catch (error: any) {\n      console.error(\"Error fetching groups:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch groups\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get ticket statistics (MUST come before /api/tickets to avoid route conflict)\n  app.get(\"/api/tickets/stats\", async (req, res) => {\n    try {\n      // Parse and validate filters with Zod\n      let rawFilters;\n      try {\n        rawFilters = {\n          search: req.query.search as string | undefined,\n          status: req.query.status ? JSON.parse(req.query.status as string) : undefined,\n          priority: req.query.priority ? JSON.parse(req.query.priority as string) : undefined,\n          category: req.query.category ? JSON.parse(req.query.category as string) : undefined,\n          type: req.query.type ? JSON.parse(req.query.type as string) : undefined,\n          dateFrom: req.query.dateFrom as string | undefined,\n          dateTo: req.query.dateTo as string | undefined,\n          closeDateFrom: req.query.closeDateFrom as string | undefined,\n          closeDateTo: req.query.closeDateTo as string | undefined,\n          assignedTo: req.query.assignedTo ? JSON.parse(req.query.assignedTo as string) : undefined,\n          assignedGroup: req.query.assignedGroup ? JSON.parse(req.query.assignedGroup as string) : undefined,\n          name: req.query.name as string | undefined,\n          users_id_recipient: req.query.users_id_recipient ? JSON.parse(req.query.users_id_recipient as string) : undefined,\n        };\n      } catch (parseError) {\n        return res.status(400).json({\n          error: \"Malformed filter parameters\",\n          message: \"Failed to parse JSON in filter parameters\",\n        });\n      }\n\n      const validationResult = ticketFiltersSchema.safeParse(rawFilters);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({\n          error: \"Invalid filters\",\n          details: validationResult.error.errors,\n        });\n      }\n\n      const stats = await ticketService.getStats(validationResult.data);\n      res.json(stats);\n    } catch (error: any) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch statistics\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get tickets with filters and pagination\n  app.get(\"/api/tickets\", async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      \n      // Parse and validate filters with Zod\n      let rawFilters;\n      try {\n        rawFilters = {\n          search: req.query.search as string | undefined,\n          status: req.query.status ? JSON.parse(req.query.status as string) : undefined,\n          priority: req.query.priority ? JSON.parse(req.query.priority as string) : undefined,\n          category: req.query.category ? JSON.parse(req.query.category as string) : undefined,\n          type: req.query.type ? JSON.parse(req.query.type as string) : undefined,\n          dateFrom: req.query.dateFrom as string | undefined,\n          dateTo: req.query.dateTo as string | undefined,\n          closeDateFrom: req.query.closeDateFrom as string | undefined,\n          closeDateTo: req.query.closeDateTo as string | undefined,\n          assignedTo: req.query.assignedTo ? JSON.parse(req.query.assignedTo as string) : undefined,\n          assignedGroup: req.query.assignedGroup ? JSON.parse(req.query.assignedGroup as string) : undefined,\n          name: req.query.name as string | undefined,\n          users_id_recipient: req.query.users_id_recipient ? JSON.parse(req.query.users_id_recipient as string) : undefined,\n        };\n      } catch (parseError) {\n        return res.status(400).json({\n          error: \"Malformed filter parameters\",\n          message: \"Failed to parse JSON in filter parameters\",\n        });\n      }\n\n      const validationResult = ticketFiltersSchema.safeParse(rawFilters);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({\n          error: \"Invalid filters\",\n          details: validationResult.error.errors,\n        });\n      }\n\n      const tickets = await ticketService.getTickets(validationResult.data, page, limit);\n      console.log(`[DEBUG] Returning ${tickets.length} tickets for page ${page}`);\n      res.json(tickets);\n    } catch (error: any) {\n      console.error(\"Error fetching tickets:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch tickets\",\n        message: error.message \n      });\n    }\n  });\n\n  // Get full ticket details (for debugging/inspection)\n  app.get(\"/api/tickets/:id/full\", async (req, res) => {\n    try {\n      const glpiClient = getGlpiClient();\n      const ticket = await glpiClient.getTicket(parseInt(req.params.id));\n      res.json(ticket);\n    } catch (error: any) {\n      console.error(\"Error fetching full ticket:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch ticket details\",\n        message: error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7229},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/dashboard/filter-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { Filter, X } from \"lucide-react\";\nimport type { TicketFilters } from \"@shared/schema\";\nimport { GLPI_STATUS } from \"@shared/schema\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface FilterPanelProps {\n  filters: TicketFilters;\n  onFiltersChange: (filters: TicketFilters) => void;\n  activeFilterCount: number;\n}\n\ninterface Category {\n  id: number;\n  name: string;\n}\n\ninterface User {\n  id: number;\n  name: string;\n}\n\nexport function FilterPanel({ filters, onFiltersChange, activeFilterCount }: FilterPanelProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [search, setSearch] = useState(filters.search || \"\");\n  const [name, setName] = useState(filters.name || \"\");\n  const [dateFrom, setDateFrom] = useState(filters.dateFrom || \"\");\n  const [dateTo, setDateTo] = useState(filters.dateTo || \"\");\n  const [closeDateFrom, setCloseDateFrom] = useState(filters.closeDateFrom || \"\");\n  const [closeDateTo, setCloseDateTo] = useState(filters.closeDateTo || \"\");\n  const [selectedStatus, setSelectedStatus] = useState<number[]>(filters.status || []);\n  const [selectedCategories, setSelectedCategories] = useState<number[]>(filters.category || []);\n  const [selectedRequesters, setSelectedRequesters] = useState<number[]>(filters.users_id_recipient || []);\n\n  // Fetch categories\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Fetch users\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const handleSearchSubmit = () => {\n    onFiltersChange({ ...filters, search });\n  };\n\n  const handleApplyFilters = () => {\n    onFiltersChange({\n      ...filters,\n      name: name || undefined,\n      dateFrom: dateFrom || undefined,\n      dateTo: dateTo || undefined,\n      closeDateFrom: closeDateFrom || undefined,\n      closeDateTo: closeDateTo || undefined,\n      status: selectedStatus.length > 0 ? selectedStatus : undefined,\n      category: selectedCategories.length > 0 ? selectedCategories : undefined,\n      users_id_recipient: selectedRequesters.length > 0 ? selectedRequesters : undefined,\n    });\n  };\n\n  const handleClearFilters = () => {\n    setSearch(\"\");\n    setName(\"\");\n    setDateFrom(\"\");\n    setDateTo(\"\");\n    setCloseDateFrom(\"\");\n    setCloseDateTo(\"\");\n    setSelectedStatus([]);\n    setSelectedCategories([]);\n    setSelectedRequesters([]);\n    onFiltersChange({});\n  };\n\n  const toggleStatus = (status: number) => {\n    setSelectedStatus((prev) =>\n      prev.includes(status) ? prev.filter((s) => s !== status) : [...prev, status]\n    );\n  };\n\n  const toggleCategory = (categoryId: number) => {\n    setSelectedCategories((prev) =>\n      prev.includes(categoryId) ? prev.filter((c) => c !== categoryId) : [...prev, categoryId]\n    );\n  };\n\n  const toggleRequester = (userId: number) => {\n    setSelectedRequesters((prev) =>\n      prev.includes(userId) ? prev.filter((u) => u !== userId) : [...prev, userId]\n    );\n  };\n\n  return (\n    <div className=\"border-b border-border bg-muted/30\">\n      <div className=\"max-w-screen-2xl mx-auto px-6 lg:px-8 py-4\">\n        <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n          <div className=\"flex flex-wrap items-center gap-3\">\n            <div className=\"flex-1 min-w-[300px]\">\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Buscar em todos os campos...\"\n                  value={search}\n                  onChange={(e) => setSearch(e.target.value)}\n                  onKeyDown={(e) => e.key === \"Enter\" && handleSearchSubmit()}\n                  className=\"pr-20\"\n                  data-testid=\"input-search\"\n                />\n                {search && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-1 top-1 h-7\"\n                    onClick={() => {\n                      setSearch(\"\");\n                      onFiltersChange({ ...filters, search: undefined });\n                    }}\n                    data-testid=\"button-clear-search\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            <CollapsibleTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-toggle-filters\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filtros\n                {activeFilterCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {activeFilterCount}\n                  </Badge>\n                )}\n              </Button>\n            </CollapsibleTrigger>\n\n            {activeFilterCount > 0 && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleClearFilters} data-testid=\"button-clear-all\">\n                Limpar filtros\n              </Button>\n            )}\n          </div>\n\n          <CollapsibleContent className=\"mt-4\">\n            <div className=\"p-6 rounded-lg bg-card border border-border space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {/* Nome do Ticket */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"filter-name\">Nome do Ticket</Label>\n                  <Input\n                    id=\"filter-name\"\n                    placeholder=\"Filtrar por nome...\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    data-testid=\"input-filter-name\"\n                  />\n                </div>\n\n                {/* Data de Abertura - De */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"filter-date-from\">Data de Abertura - De</Label>\n                  <Input\n                    id=\"filter-date-from\"\n                    type=\"date\"\n                    value={dateFrom}\n                    onChange={(e) => setDateFrom(e.target.value)}\n                    data-testid=\"input-filter-date-from\"\n                  />\n                </div>\n\n                {/* Data de Abertura - Até */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"filter-date-to\">Data de Abertura - Até</Label>\n                  <Input\n                    id=\"filter-date-to\"\n                    type=\"date\"\n                    value={dateTo}\n                    onChange={(e) => setDateTo(e.target.value)}\n                    data-testid=\"input-filter-date-to\"\n                  />\n                </div>\n\n                {/* Data de Fechamento - De */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"filter-closedate-from\">Data de Fechamento - De</Label>\n                  <Input\n                    id=\"filter-closedate-from\"\n                    type=\"date\"\n                    value={closeDateFrom}\n                    onChange={(e) => setCloseDateFrom(e.target.value)}\n                    data-testid=\"input-filter-closedate-from\"\n                  />\n                </div>\n\n                {/* Data de Fechamento - Até */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"filter-closedate-to\">Data de Fechamento - Até</Label>\n                  <Input\n                    id=\"filter-closedate-to\"\n                    type=\"date\"\n                    value={closeDateTo}\n                    onChange={(e) => setCloseDateTo(e.target.value)}\n                    data-testid=\"input-filter-closedate-to\"\n                  />\n                </div>\n              </div>\n\n              {/* Status */}\n              <div className=\"space-y-2\">\n                <Label>Status</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {Object.entries(GLPI_STATUS).map(([statusNum, statusLabel]) => {\n                    const status = parseInt(statusNum);\n                    const isSelected = selectedStatus.includes(status);\n                    return (\n                      <Badge\n                        key={status}\n                        variant={isSelected ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer hover-elevate active-elevate-2\"\n                        onClick={() => toggleStatus(status)}\n                        data-testid={`badge-status-${status}`}\n                      >\n                        {statusLabel}\n                      </Badge>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Categorias */}\n              {categories && categories.length > 0 && (\n                <div className=\"space-y-2\">\n                  <Label>Categorias</Label>\n                  <div className=\"flex flex-wrap gap-2 max-h-32 overflow-y-auto\">\n                    {categories.map((category) => {\n                      const isSelected = selectedCategories.includes(category.id);\n                      return (\n                        <Badge\n                          key={category.id}\n                          variant={isSelected ? \"default\" : \"outline\"}\n                          className=\"cursor-pointer hover-elevate active-elevate-2\"\n                          onClick={() => toggleCategory(category.id)}\n                          data-testid={`badge-category-${category.id}`}\n                        >\n                          {category.name}\n                        </Badge>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {/* Solicitantes */}\n              {users && users.length > 0 && (\n                <div className=\"space-y-2\">\n                  <Label>Solicitantes</Label>\n                  <div className=\"flex flex-wrap gap-2 max-h-32 overflow-y-auto\">\n                    {users.slice(0, 20).map((user) => {\n                      const isSelected = selectedRequesters.includes(user.id);\n                      return (\n                        <Badge\n                          key={user.id}\n                          variant={isSelected ? \"default\" : \"outline\"}\n                          className=\"cursor-pointer hover-elevate active-elevate-2\"\n                          onClick={() => toggleRequester(user.id)}\n                          data-testid={`badge-requester-${user.id}`}\n                        >\n                          {user.name}\n                        </Badge>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {/* Ações */}\n              <div className=\"flex gap-2 pt-4 border-t\">\n                <Button onClick={handleApplyFilters} data-testid=\"button-apply-filters\">\n                  Aplicar Filtros\n                </Button>\n                <Button variant=\"outline\" onClick={handleClearFilters} data-testid=\"button-clear-filters\">\n                  Limpar Tudo\n                </Button>\n              </div>\n            </div>\n          </CollapsibleContent>\n        </Collapsible>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11462},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/dashboard-glpi.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { DashboardHeader } from \"@/components/dashboard/dashboard-header\";\nimport { KPICards } from \"@/components/dashboard/kpi-cards\";\nimport { FilterPanel } from \"@/components/dashboard/filter-panel\";\nimport { ChartsSection } from \"@/components/dashboard/charts-section\";\nimport { TicketsTable } from \"@/components/dashboard/tickets-table\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle } from \"lucide-react\";\nimport type { GlpiTicket, TicketFilters, TicketStats } from \"@shared/schema\";\n\nconst ITEMS_PER_PAGE = 20;\nconst AUTO_REFRESH_INTERVAL = 30000; // 30 seconds\n\nexport default function DashboardGlpi() {\n  const [filters, setFilters] = useState<TicketFilters>({});\n  const [currentPage, setCurrentPage] = useState(1);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n\n  // Build query params for API\n  const buildQueryString = (filters: TicketFilters, page?: number) => {\n    const params = new URLSearchParams();\n    if (filters.search) params.append(\"search\", filters.search);\n    if (filters.status) params.append(\"status\", JSON.stringify(filters.status));\n    if (filters.priority) params.append(\"priority\", JSON.stringify(filters.priority));\n    if (filters.category) params.append(\"category\", JSON.stringify(filters.category));\n    if (filters.type) params.append(\"type\", JSON.stringify(filters.type));\n    if (filters.dateFrom) params.append(\"dateFrom\", filters.dateFrom);\n    if (filters.dateTo) params.append(\"dateTo\", filters.dateTo);\n    if (filters.closeDateFrom) params.append(\"closeDateFrom\", filters.closeDateFrom);\n    if (filters.closeDateTo) params.append(\"closeDateTo\", filters.closeDateTo);\n    if (filters.name) params.append(\"name\", filters.name);\n    if (filters.users_id_recipient) params.append(\"users_id_recipient\", JSON.stringify(filters.users_id_recipient));\n    if (page) params.append(\"page\", page.toString());\n    params.append(\"limit\", ITEMS_PER_PAGE.toString());\n    return params.toString();\n  };\n\n  // Fetch tickets\n  const {\n    data: tickets,\n    isLoading: isLoadingTickets,\n    refetch: refetchTickets,\n    isFetching: isFetchingTickets,\n    error: ticketsError,\n  } = useQuery<GlpiTicket[]>({\n    queryKey: [`/api/tickets?${buildQueryString(filters, currentPage)}`],\n    refetchInterval: autoRefresh ? AUTO_REFRESH_INTERVAL : false,\n    refetchOnWindowFocus: true,\n    retry: 2,\n  });\n\n  // Fetch stats\n  const {\n    data: stats,\n    isLoading: isLoadingStats,\n    refetch: refetchStats,\n    error: statsError,\n  } = useQuery<TicketStats>({\n    queryKey: [`/api/tickets/stats?${buildQueryString(filters)}`],\n    refetchInterval: autoRefresh ? AUTO_REFRESH_INTERVAL : false,\n    refetchOnWindowFocus: true,\n    retry: 2,\n  });\n\n  // Update last update time\n  useEffect(() => {\n    if (tickets || stats) {\n      setLastUpdate(new Date());\n    }\n  }, [tickets, stats]);\n\n  const handleRefresh = () => {\n    refetchTickets();\n    refetchStats();\n  };\n\n  const handleFiltersChange = (newFilters: TicketFilters) => {\n    setFilters(newFilters);\n    setCurrentPage(1); // Reset to first page when filters change\n  };\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  // Calculate active filter count\n  const activeFilterCount = [\n    filters.search,\n    filters.status?.length,\n    filters.priority?.length,\n    filters.category?.length,\n    filters.type?.length,\n    filters.dateFrom,\n    filters.dateTo,\n    filters.closeDateFrom,\n    filters.closeDateTo,\n    filters.name,\n    filters.users_id_recipient?.length,\n  ].filter(Boolean).length;\n\n  // Calculate total pages\n  const totalPages = tickets && stats ? Math.max(1, Math.ceil(stats.total / ITEMS_PER_PAGE)) : 1;\n\n  // Error state\n  const hasError = ticketsError || statsError;\n\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <DashboardHeader\n        lastUpdate={lastUpdate}\n        isRefreshing={isFetchingTickets}\n        onRefresh={handleRefresh}\n        autoRefresh={autoRefresh}\n        onAutoRefreshChange={setAutoRefresh}\n      />\n\n      <FilterPanel\n        filters={filters}\n        onFiltersChange={handleFiltersChange}\n        activeFilterCount={activeFilterCount}\n      />\n\n      <main className=\"max-w-screen-2xl mx-auto px-6 lg:px-8 py-8 space-y-8\">\n        {hasError && (\n          <Alert variant=\"destructive\" data-testid=\"alert-error\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Erro ao carregar dados</AlertTitle>\n            <AlertDescription className=\"flex items-center justify-between\">\n              <span>\n                Não foi possível conectar com a API GLPI. Verifique as credenciais e tente novamente.\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleRefresh}\n                data-testid=\"button-retry\"\n              >\n                Tentar Novamente\n              </Button>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <KPICards stats={stats} isLoading={isLoadingStats} />\n        \n        <ChartsSection stats={stats} isLoading={isLoadingStats} />\n        \n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\">Tickets Recentes</h2>\n          <TicketsTable\n            tickets={tickets}\n            isLoading={isLoadingTickets}\n            currentPage={currentPage}\n            totalPages={totalPages}\n            onPageChange={handlePageChange}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5708},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"attached_assets/firebase_1760837559260.ts":{"content":"import { initializeApp, getApps } from \"firebase/app\"\nimport { getFirestore, collection, doc } from \"firebase/firestore\"\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n}\n\nconst app = getApps().length ? getApps()[0] : initializeApp(firebaseConfig)\nexport const db = getFirestore(app)\n\n// Tarefas do dia: workspaces/{ws}/days/{ymd}/tasks/*\nexport function tasksCollection(workspaceId: string, ymd: string) {\n  return collection(doc(collection(db, \"workspaces\"), workspaceId), \"days\", ymd, \"tasks\")\n}\n","size_bytes":820},"client/src/lib/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1603},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"attached_assets/postcss.config_1760837559258.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"server/ticket-service.ts":{"content":"import { getGlpiClient } from \"./glpi-client\";\nimport type { TicketFilters, TicketStats, GlpiTicket } from \"@shared/schema\";\n\nclass TicketService {\n  async getTickets(filters: TicketFilters, page: number = 1, limit: number = 20): Promise<GlpiTicket[]> {\n    const glpiClient = getGlpiClient();\n    \n    // Fetch a larger set to apply filtering client-side\n    // In production, this should use GLPI's search API properly\n    const tickets = await glpiClient.getTickets({\n      range: \"0-999\",\n    });\n\n    console.log(`[DEBUG] GLPI returned ${tickets.length} tickets`);\n\n    // Apply filters client-side\n    let filteredTickets = tickets;\n\n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.name?.toLowerCase().includes(searchLower) ||\n        t.content?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    if (filters.status && filters.status.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        filters.status!.includes(t.status)\n      );\n    }\n\n    if (filters.priority && filters.priority.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        filters.priority!.includes(t.priority)\n      );\n    }\n\n    if (filters.type && filters.type.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        filters.type!.includes(t.type)\n      );\n    }\n\n    if (filters.category && filters.category.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.itilcategories_id && filters.category!.includes(t.itilcategories_id)\n      );\n    }\n\n    if (filters.assignedTo && filters.assignedTo.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.users_id_assign && filters.assignedTo!.includes(t.users_id_assign)\n      );\n    }\n\n    if (filters.assignedGroup && filters.assignedGroup.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.groups_id_assign && filters.assignedGroup!.includes(t.groups_id_assign)\n      );\n    }\n\n    if (filters.dateFrom) {\n      const dateFrom = filters.dateFrom;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.date && t.date >= dateFrom\n      );\n    }\n\n    if (filters.dateTo) {\n      const dateTo = filters.dateTo;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.date && t.date <= dateTo\n      );\n    }\n\n    if (filters.name) {\n      const nameLower = filters.name.toLowerCase();\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.name?.toLowerCase().includes(nameLower)\n      );\n    }\n\n    if (filters.closeDateFrom) {\n      const closeDateFrom = filters.closeDateFrom;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.closedate && t.closedate >= closeDateFrom\n      );\n    }\n\n    if (filters.closeDateTo) {\n      const closeDateTo = filters.closeDateTo;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.closedate && t.closedate <= closeDateTo\n      );\n    }\n\n    if (filters.users_id_recipient && filters.users_id_recipient.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.users_id_recipient && filters.users_id_recipient!.includes(t.users_id_recipient)\n      );\n    }\n\n    // Apply pagination\n    const start = (page - 1) * limit;\n    console.log(`[DEBUG] Returning ${Math.min(limit, filteredTickets.length - start)} tickets for page ${page}`);\n    const paginatedTickets = filteredTickets.slice(start, start + limit);\n\n    return paginatedTickets;\n  }\n\n  async getStats(filters: TicketFilters): Promise<TicketStats> {\n    const glpiClient = getGlpiClient();\n    \n    // Fetch all tickets (up to 1000 for stats calculation)\n    const tickets = await glpiClient.getTickets({\n      range: \"0-999\",\n    });\n\n    // Apply filters to tickets\n    let filteredTickets = tickets;\n\n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.name?.toLowerCase().includes(searchLower) ||\n        t.content?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    if (filters.status && filters.status.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        filters.status!.includes(t.status)\n      );\n    }\n\n    if (filters.priority && filters.priority.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        filters.priority!.includes(t.priority)\n      );\n    }\n\n    if (filters.type && filters.type.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        filters.type!.includes(t.type)\n      );\n    }\n\n    if (filters.category && filters.category.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.itilcategories_id && filters.category!.includes(t.itilcategories_id)\n      );\n    }\n\n    if (filters.assignedTo && filters.assignedTo.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.users_id_assign && filters.assignedTo!.includes(t.users_id_assign)\n      );\n    }\n\n    if (filters.assignedGroup && filters.assignedGroup.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.groups_id_assign && filters.assignedGroup!.includes(t.groups_id_assign)\n      );\n    }\n\n    if (filters.dateFrom) {\n      const dateFrom = filters.dateFrom;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.date && t.date >= dateFrom\n      );\n    }\n\n    if (filters.dateTo) {\n      const dateTo = filters.dateTo;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.date && t.date <= dateTo\n      );\n    }\n\n    if (filters.name) {\n      const nameLower = filters.name.toLowerCase();\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.name?.toLowerCase().includes(nameLower)\n      );\n    }\n\n    if (filters.closeDateFrom) {\n      const closeDateFrom = filters.closeDateFrom;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.closedate && t.closedate >= closeDateFrom\n      );\n    }\n\n    if (filters.closeDateTo) {\n      const closeDateTo = filters.closeDateTo;\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.closedate && t.closedate <= closeDateTo\n      );\n    }\n\n    if (filters.users_id_recipient && filters.users_id_recipient.length > 0) {\n      filteredTickets = filteredTickets.filter((t: any) =>\n        t.users_id_recipient && filters.users_id_recipient!.includes(t.users_id_recipient)\n      );\n    }\n\n    // Calculate statistics\n    const total = filteredTickets.length;\n    let newCount = 0;\n    let inProgressCount = 0;\n    let pendingCount = 0;\n    let solvedCount = 0;\n    let closedCount = 0;\n\n    const byStatus = new Map<number, number>();\n    const byPriority = new Map<number, number>();\n    const byType = new Map<number, number>();\n    const byCategory = new Map<number, number>();\n    const byRequester = new Map<number, number>();\n    const timelineOpenMap = new Map<string, number>();\n    const timelineCloseMap = new Map<string, number>();\n\n    let totalCloseDelay = 0;\n    let totalSolveDelay = 0;\n    let totalTakeIntoAccountDelay = 0;\n    let totalWaitingDuration = 0;\n    let countWithCloseDelay = 0;\n    let countWithSolveDelay = 0;\n    let countWithTakeIntoAccountDelay = 0;\n    let countWithWaitingDuration = 0;\n\n    filteredTickets.forEach((ticket: any) => {\n      // Count by status\n      switch (ticket.status) {\n        case 1:\n          newCount++;\n          break;\n        case 2:\n          inProgressCount++;\n          break;\n        case 3:\n        case 4:\n          pendingCount++;\n          break;\n        case 5:\n          solvedCount++;\n          break;\n        case 6:\n          closedCount++;\n          break;\n      }\n\n      // Aggregate for charts\n      byStatus.set(ticket.status, (byStatus.get(ticket.status) || 0) + 1);\n      byPriority.set(ticket.priority, (byPriority.get(ticket.priority) || 0) + 1);\n      byType.set(ticket.type, (byType.get(ticket.type) || 0) + 1);\n\n      // Category aggregation\n      if (ticket.itilcategories_id) {\n        byCategory.set(ticket.itilcategories_id, (byCategory.get(ticket.itilcategories_id) || 0) + 1);\n      }\n\n      // Requester aggregation\n      if (ticket.users_id_recipient) {\n        byRequester.set(ticket.users_id_recipient, (byRequester.get(ticket.users_id_recipient) || 0) + 1);\n      }\n\n      // Time metrics\n      if (ticket.close_delay_stat) {\n        totalCloseDelay += ticket.close_delay_stat;\n        countWithCloseDelay++;\n      }\n      if (ticket.solve_delay_stat) {\n        totalSolveDelay += ticket.solve_delay_stat;\n        countWithSolveDelay++;\n      }\n      if (ticket.takeintoaccount_delay_stat) {\n        totalTakeIntoAccountDelay += ticket.takeintoaccount_delay_stat;\n        countWithTakeIntoAccountDelay++;\n      }\n      if (ticket.waiting_duration) {\n        totalWaitingDuration += ticket.waiting_duration;\n        countWithWaitingDuration++;\n      }\n\n      // Timeline data - opened tickets\n      const openDate = ticket.date ? ticket.date.split(\" \")[0] : new Date().toISOString().split(\"T\")[0];\n      timelineOpenMap.set(openDate, (timelineOpenMap.get(openDate) || 0) + 1);\n\n      // Timeline data - closed tickets\n      if (ticket.closedate) {\n        const closeDate = ticket.closedate.split(\" \")[0];\n        timelineCloseMap.set(closeDate, (timelineCloseMap.get(closeDate) || 0) + 1);\n      }\n    });\n\n    // Convert maps to arrays\n    const byStatusArray = Array.from(byStatus.entries()).map(([status, count]) => ({\n      status,\n      count,\n    }));\n\n    const byPriorityArray = Array.from(byPriority.entries()).map(([priority, count]) => ({\n      priority,\n      count,\n    }));\n\n    const byTypeArray = Array.from(byType.entries()).map(([type, count]) => ({\n      type,\n      count,\n    }));\n\n    // Top requesters (sorted by count, top 10)\n    const topRequesters = Array.from(byRequester.entries())\n      .map(([userId, count]) => ({\n        userId,\n        userName: `User ${userId}`, // Will be enriched on frontend\n        count,\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    // By category (sorted by count)\n    const byCategoryArray = Array.from(byCategory.entries())\n      .map(([categoryId, count]) => ({\n        categoryId,\n        categoryName: `Category ${categoryId}`, // Will be enriched on frontend\n        count,\n      }))\n      .sort((a, b) => b.count - a.count);\n\n    // Timeline comparison (opened vs closed)\n    const allDates = new Set([\n      ...Array.from(timelineOpenMap.keys()),\n      ...Array.from(timelineCloseMap.keys()),\n    ]);\n    const timelineComparison = Array.from(allDates)\n      .map((date) => ({\n        date,\n        opened: timelineOpenMap.get(date) || 0,\n        closed: timelineCloseMap.get(date) || 0,\n      }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n\n    // Simple timeline (just opened tickets)\n    const timeline = Array.from(timelineOpenMap.entries())\n      .map(([date, count]) => ({ date, count }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n\n    // Calculate average time metrics (in seconds)\n    const avgCloseDelay = countWithCloseDelay > 0 ? totalCloseDelay / countWithCloseDelay : 0;\n    const avgSolveDelay = countWithSolveDelay > 0 ? totalSolveDelay / countWithSolveDelay : 0;\n    const avgTakeIntoAccountDelay = countWithTakeIntoAccountDelay > 0 \n      ? totalTakeIntoAccountDelay / countWithTakeIntoAccountDelay \n      : 0;\n    const avgWaitingDuration = countWithWaitingDuration > 0 \n      ? totalWaitingDuration / countWithWaitingDuration \n      : 0;\n\n    return {\n      total,\n      new: newCount,\n      inProgress: inProgressCount,\n      pending: pendingCount,\n      solved: solvedCount,\n      closed: closedCount,\n      avgCloseDelay,\n      avgSolveDelay,\n      avgTakeIntoAccountDelay,\n      avgWaitingDuration,\n      byStatus: byStatusArray,\n      byPriority: byPriorityArray,\n      byType: byTypeArray,\n      byCategory: byCategoryArray,\n      topRequesters,\n      timeline,\n      timelineComparison,\n    };\n  }\n}\n\nexport const ticketService = new TicketService();\n","size_bytes":12157},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/lib/theme-provider\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport EsteiraDemandas from \"@/pages/esteira-demandas\";\nimport DashboardGlpi from \"@/pages/dashboard-glpi\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={EsteiraDemandas} />\n      <Route path=\"/dashboard\" component={DashboardGlpi} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  // Custom sidebar width for the unified platform\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <Router />\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":1528},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"attached_assets/useWorkspaceParam_1760837559259.ts":{"content":"// src/hooks/useWorkspaceParam.ts\nimport { useMemo } from \"react\";\n\nexport default function useWorkspaceParam() {\n  return useMemo(() => {\n    const url = new URL(window.location.href);\n    return url.searchParams.get(\"ws\") || \"demo\"; // padrão \"demo\"\n  }, []);\n}\n","size_bytes":265},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"replit.md":{"content":"# Overview\n\nThis is a unified management platform for JaContact that combines two key modules:\n\n1. **Esteira de Demandas** - A task pipeline/kanban system for managing daily operational demands across different teams and operations\n2. **Dashboard GLPI** - A real-time monitoring dashboard for GLPI ticketing system with filtering, statistics, and data visualization\n\nThe platform provides a cohesive interface for tracking both internal demands and external support tickets, enabling comprehensive operational oversight.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework**: React 18+ with TypeScript, using Vite as the build tool and development server.\n\n**UI Component System**: Shadcn/ui (Radix UI primitives) with Material Design principles. Components follow the \"new-york\" style variant with dark mode as the primary theme. All UI components are located in `client/src/components/ui/` and use Tailwind CSS for styling with custom CSS variables for theming.\n\n**Routing**: Wouter for lightweight client-side routing. Two main routes:\n- `/` - Esteira de Demandas (task pipeline)\n- `/dashboard` - GLPI Dashboard\n\n**State Management**: \n- TanStack Query (React Query) for server state and API data fetching with automatic caching and refetching\n- Local React state (useState) for UI state\n- Firebase Firestore real-time listeners for Esteira de Demandas task synchronization\n\n**Styling Approach**: Tailwind CSS with custom design tokens defined in CSS variables. The design follows a cohesive color palette with both light and dark mode support, though dark mode is the primary interface. Typography uses Inter font family from Google Fonts.\n\n**Layout Structure**: SidebarProvider wraps the entire app, providing a unified navigation sidebar (16rem width) that allows switching between the two modules. The sidebar includes theme toggle functionality.\n\n## Backend Architecture\n\n**Server Framework**: Express.js with TypeScript running on Node.js. The server uses ES modules (type: \"module\" in package.json).\n\n**API Architecture**: RESTful API endpoints under `/api/*` prefix:\n- `/api/tickets` - Fetch and filter GLPI tickets\n- `/api/stats` - Retrieve ticket statistics\n- `/api/categories` - Get GLPI ticket categories\n- `/api/users` - Get GLPI technicians/users\n\n**Development vs Production**: \n- Development: Vite middleware integrated into Express for HMR and fast refresh\n- Production: Static files served from `dist/public` after build\n\n**Error Handling**: Global error handler middleware catches all errors and returns JSON responses with appropriate HTTP status codes.\n\n**Logging**: Custom request logging middleware tracks API requests with timing information, automatically truncating long log lines to 80 characters.\n\n## Data Storage Solutions\n\n**Esteira de Demandas**: Firebase Firestore (NoSQL cloud database)\n- Structure: `workspaces/{workspaceId}/days/{YYYY-MM-DD}/tasks/*`\n- Real-time synchronization using Firestore's `onSnapshot` listeners\n- Workspace isolation via query parameter `?ws=` in URL\n- Supports recurring tasks with series tracking (daily/weekly patterns)\n\n**GLPI Integration**: External GLPI API (no local database for tickets)\n- Session-based authentication using user tokens and app tokens\n- Direct `/Ticket/` endpoint used for fetching tickets with proper data structure\n- Server-side filtering applied for all ticket parameters (status, priority, type, category, assignedTo, assignedGroup, dates)\n- Ticket data fetched on-demand with configurable auto-refresh (30-second intervals)\n- Statistics calculated server-side from filtered ticket data\n\n**User Data** (Optional/Future): Drizzle ORM configured for PostgreSQL\n- Schema defined in `shared/schema.ts` for potential user authentication\n- Currently uses in-memory storage (`MemStorage` class) as placeholder\n- Neon Database serverless driver configured but not actively used\n\n## External Dependencies\n\n**Third-Party Services**:\n- **Firebase/Firestore**: Cloud-hosted NoSQL database for task management. Requires environment variables for configuration (VITE_FIREBASE_*).\n- **GLPI API**: External ticketing system integration. Requires `GLPI_API_URL`, `GLPI_USER_TOKEN`, and `GLPI_APP_TOKEN` environment variables.\n- **Neon Database**: PostgreSQL serverless database (configured but optional). Requires `DATABASE_URL` environment variable.\n\n**Key Libraries**:\n- **@radix-ui/**: Primitive UI components (dialogs, dropdowns, popovers, etc.)\n- **@tanstack/react-query**: Server state management and caching\n- **axios**: HTTP client for GLPI API requests\n- **drizzle-orm** & **drizzle-kit**: TypeScript ORM for PostgreSQL with schema migrations\n- **firebase**: SDK for Firestore integration\n- **wouter**: Minimal routing library\n- **recharts**: Charting library for data visualization in dashboard\n- **tailwindcss**: Utility-first CSS framework\n- **zod**: TypeScript-first schema validation\n\n**Build Tools**:\n- **Vite**: Frontend build tool and dev server with HMR\n- **esbuild**: Backend bundler for production builds\n- **TypeScript**: Type-safe development across frontend and backend\n- **tsx**: TypeScript execution for Node.js development\n\n**Design Rationale**: The architecture separates concerns between external ticket management (GLPI) and internal task coordination (Firebase), allowing each system to be optimized independently. The unified frontend provides a single interface while maintaining flexibility in backend data sources.","size_bytes":5512},"client/src/components/app-sidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Home, BarChart3, Moon, Sun } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useTheme } from \"@/lib/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\n\nconst menuItems = [\n  {\n    title: \"Esteira de Demandas\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Dashboard GLPI\",\n    url: \"/dashboard\",\n    icon: BarChart3,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-sm\">JC</span>\n          </div>\n          <div>\n            <h2 className=\"text-sm font-semibold\">JaContact</h2>\n            <p className=\"text-xs text-muted-foreground\">Plataforma de Gestão</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Módulos</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4 border-t border-sidebar-border\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n          className=\"w-full justify-start\"\n          data-testid=\"button-theme-toggle\"\n        >\n          {theme === \"dark\" ? (\n            <>\n              <Sun className=\"h-4 w-4 mr-2\" />\n              Modo Claro\n            </>\n          ) : (\n            <>\n              <Moon className=\"h-4 w-4 mr-2\" />\n              Modo Escuro\n            </>\n          )}\n        </Button>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":2755},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/esteira/volume-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface VolumeCardProps {\n  title: string;\n  rows: [string, number][];\n}\n\nexport function VolumeCard({ title, rows }: VolumeCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-base\">{title}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-2\">\n        {rows.length === 0 && <div className=\"text-sm text-muted-foreground\">Sem dados</div>}\n        {rows.map(([k, v]) => (\n          <div key={k} className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-foreground\">{k || \"—\"}</span>\n            <span className=\"font-medium\" data-testid={`volume-${k}`}>{v}</span>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":822},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/vite.config_1760837559261.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  base: process.env.BASE_URL || '/',\n})\n","size_bytes":170},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Date utilities\nexport function isHHMM(v: any): v is string {\n  return typeof v === \"string\" && /^\\d{2}:\\d{2}$/.test(v);\n}\n\nexport function hhmmToMin(hhmm: string): number {\n  if (!isHHMM(hhmm)) return 0;\n  const [h, m] = hhmm.split(\":\").map(Number);\n  return (Number.isFinite(h) ? h : 0) * 60 + (Number.isFinite(m) ? m : 0);\n}\n\nexport function ymdToDate(ymd: string): Date {\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(ymd)) {\n    const d = new Date();\n    return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n  }\n  const [Y, M, D] = ymd.split(\"-\").map(Number);\n  return new Date(Y, (M || 1) - 1, D || 1);\n}\n\nexport function dateToYMD(d: Date): string {\n  const y = d.getFullYear();\n  const m = String(d.getMonth() + 1).padStart(2, \"0\");\n  const day = String(d.getDate()).padStart(2, \"0\");\n  return `${y}-${m}-${day}`;\n}\n\nexport function formatDate(date: string | Date): string {\n  const d = typeof date === \"string\" ? new Date(date) : date;\n  return d.toLocaleDateString(\"pt-BR\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n  });\n}\n\nexport function formatDateTime(date: string | Date): string {\n  const d = typeof date === \"string\" ? new Date(date) : date;\n  return d.toLocaleString(\"pt-BR\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n}\n\nexport function formatTime(date: string | Date): string {\n  const d = typeof date === \"string\" ? new Date(date) : date;\n  return d.toLocaleTimeString(\"pt-BR\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n}\n\n// Time formatting utilities\nexport function formatDuration(seconds: number): string {\n  if (!seconds || seconds === 0) return \"0h\";\n  \n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  \n  if (hours > 0 && minutes > 0) {\n    return `${hours}h ${minutes}min`;\n  } else if (hours > 0) {\n    return `${hours}h`;\n  } else {\n    return `${minutes}min`;\n  }\n}\n\n// Format seconds to HH:MM:SS\nexport function formatSecondsToHHMMSS(seconds: number): string {\n  if (!seconds || seconds === 0) return \"00:00:00\";\n  \n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  return [hours, minutes, secs]\n    .map(val => String(val).padStart(2, '0'))\n    .join(':');\n}\n\n// GLPI status helpers\nexport function getStatusColor(status: number): string {\n  switch (status) {\n    case 1: // New\n      return \"bg-blue-500\";\n    case 2: // Processing\n      return \"bg-yellow-500\";\n    case 3: // Pending\n      return \"bg-orange-500\";\n    case 4: // Solved\n      return \"bg-green-500\";\n    case 5: // Closed\n      return \"bg-gray-500\";\n    default:\n      return \"bg-gray-400\";\n  }\n}\n\nexport function getPriorityColor(priority: number): string {\n  switch (priority) {\n    case 1:\n    case 2:\n      return \"text-muted-foreground\";\n    case 3:\n      return \"text-blue-500\";\n    case 4:\n      return \"text-yellow-500\";\n    case 5:\n      return \"text-orange-500\";\n    case 6:\n      return \"text-red-500\";\n    default:\n      return \"text-muted-foreground\";\n  }\n}\n","size_bytes":3284},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"attached_assets/App_1760837559259.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useMemo, useState } from \"react\"\nimport {\n  addDoc,\n  collectionGroup,\n  deleteDoc,\n  doc,\n  getDocs,\n  onSnapshot,\n  orderBy,\n  query,\n  updateDoc,\n  where,\n} from \"firebase/firestore\"\nimport { db, tasksCollection } from \"./lib/firebase\"\n\n/* ===========================\n   Tipos\n=========================== */\ntype RecKind = \"once\" | \"daily\" | \"weekly\"\n\ntype Task = {\n  id: string\n  titulo: string\n  inicio: string // HH:MM\n  fim: string // HH:MM\n  concluida: boolean\n  responsavel: string\n  operacao: string\n  ymd: string // YYYY-MM-DD\n  seriesId?: string\n  recKind?: RecKind\n  workspaceId: string\n  createdAt: number\n}\n\n/* ===========================\n   Constantes\n=========================== */\n// Colunas do Kanban (apenas esses três)\nconst RESPONSAVEIS = [\"Bárbara Arruda\", \"Gabriel Bion\", \"Luciano Miranda\"]\n\n// Lista fixa de operações\nconst OPERACOES = [\n  \"FMU\",\n  \"INSPIRALI\",\n  \"COGNA\",\n  \"SINGULARIDADES\",\n  \"PÓS COGNA\",\n  \"UFEM\",\n  \"TELECOM\",\n  \"FGTS\",\n  \"DIROMA\",\n  \"ESTÁCIO\",\n]\n\n// Recorrência: horizontes padrão\nconst HORIZON_DAYS = 30 // daily -> próximos 30 dias\nconst WEEKS_COUNT = 8 // weekly -> 8 semanas\n\n/* ===========================\n   Utils\n=========================== */\nfunction isHHMM(v: any): v is string {\n  return typeof v === \"string\" && /^\\d{2}:\\d{2}$/.test(v)\n}\nfunction hhmmToMin(hhmm: string): number {\n  if (!isHHMM(hhmm)) return 0\n  const [h, m] = hhmm.split(\":\").map(Number)\n  return (Number.isFinite(h) ? h : 0) * 60 + (Number.isFinite(m) ? m : 0)\n}\nfunction ymdToDate(ymd: string) {\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(ymd)) {\n    const d = new Date()\n    return new Date(d.getFullYear(), d.getMonth(), d.getDate())\n  }\n  const [Y, M, D] = ymd.split(\"-\").map(Number)\n  return new Date(Y, (M || 1) - 1, D || 1)\n}\nfunction dateToYMD(d: Date) {\n  const y = d.getFullYear()\n  const m = String(d.getMonth() + 1).padStart(2, \"0\")\n  const day = String(d.getDate()).padStart(2, \"0\")\n  return `${y}-${m}-${day}`\n}\n\n/* ===========================\n   App\n=========================== */\nexport default function App() {\n  // workspace via ?ws=\n  const params = new URLSearchParams(window.location.search)\n  const ws = params.get(\"ws\") || \"demo\"\n\n  const [selectedDate, setSelectedDate] = useState(() => dateToYMD(new Date()))\n  const [tasks, setTasks] = useState<Task[]>([])\n\n  // filtros\n  const [filterResp, setFilterResp] = useState<string>(\"(todos)\")\n  const [filterOp, setFilterOp] = useState<string>(\"(todas)\")\n\n  // modais\n  const [showNew, setShowNew] = useState(false)\n  const [editing, setEditing] = useState<Task | null>(null)\n\n  /* ===========================\n     Carrega tarefas do dia\n  =========================== */\n  useEffect(() => {\n    const qy = query(tasksCollection(ws, selectedDate), orderBy(\"inicio\"))\n    return onSnapshot(qy, (snap) => {\n      const list: Task[] = []\n      snap.forEach((d) => {\n        const data = d.data() as any\n        const ini = data?.inicio\n        const fim = data?.fim\n        if (!isHHMM(ini) || !isHHMM(fim)) return // ignora registros inválidos\n        list.push({\n          id: d.id,\n          titulo: String(data?.titulo ?? \"Demanda\"),\n          inicio: ini,\n          fim: fim,\n          concluida: Boolean(data?.concluida),\n          responsavel: String(data?.responsavel ?? \"\"),\n          operacao: String(data?.operacao ?? \"\"),\n          ymd: String(data?.ymd ?? selectedDate),\n          seriesId: data?.seriesId,\n          recKind: (data?.recKind ?? \"once\") as RecKind,\n          workspaceId: String(data?.workspaceId ?? ws),\n          createdAt: Number(data?.createdAt ?? Date.now()),\n        })\n      })\n      setTasks(list)\n    })\n  }, [ws, selectedDate])\n\n  /* ===========================\n     CRUD helpers + recorrência real\n  =========================== */\n  async function addOne(input: Omit<Task, \"id\" | \"workspaceId\" | \"createdAt\">) {\n    const docData: any = {\n      titulo: input.titulo,\n      inicio: input.inicio,\n      fim: input.fim,\n      concluida: Boolean(input.concluida),\n      responsavel: input.responsavel,\n      operacao: input.operacao,\n      ymd: input.ymd,\n      recKind: input.recKind || \"once\",\n      workspaceId: ws,\n      createdAt: Date.now(),\n    }\n    if (input.seriesId) docData.seriesId = input.seriesId // nunca undefined\n    await addDoc(tasksCollection(ws, input.ymd), docData)\n  }\n\n  function generateOccurrences(kind: RecKind | undefined, startYmd: string, weekDay?: number): string[] {\n    const occs: string[] = []\n    const d0 = ymdToDate(startYmd)\n\n    if (!kind || kind === \"once\") {\n      occs.push(startYmd)\n      return occs\n    }\n\n    if (kind === \"daily\") {\n      for (let i = 0; i < HORIZON_DAYS; i++) {\n        const d = new Date(d0)\n        d.setDate(d0.getDate() + i)\n        occs.push(dateToYMD(d))\n      }\n      return occs\n    }\n\n    if (kind === \"weekly\") {\n      // Se weekDay foi especificado, encontra a próxima ocorrência desse dia\n      if (weekDay !== undefined) {\n        const currentDay = d0.getDay()\n        const daysUntilTarget = (weekDay - currentDay + 7) % 7\n        const firstOccurrence = new Date(d0)\n        firstOccurrence.setDate(d0.getDate() + daysUntilTarget)\n\n        for (let w = 0; w < WEEKS_COUNT; w++) {\n          const d = new Date(firstOccurrence)\n          d.setDate(firstOccurrence.getDate() + w * 7)\n          occs.push(dateToYMD(d))\n        }\n      } else {\n        // Comportamento antigo: usa o dia atual\n        for (let w = 0; w < WEEKS_COUNT; w++) {\n          const d = new Date(d0)\n          d.setDate(d0.getDate() + w * 7)\n          occs.push(dateToYMD(d))\n        }\n      }\n    }\n    return occs\n  }\n\n  async function addTaskWithRecurrence(base: Omit<Task, \"id\" | \"workspaceId\" | \"createdAt\">, weekDay?: number) {\n    const seriesId = base.recKind && base.recKind !== \"once\" ? crypto.randomUUID() : undefined\n    const occs = generateOccurrences(base.recKind, base.ymd, weekDay)\n\n    // grava cada ocorrência (uma por dia)\n    await Promise.all(\n      occs.map((ymd) =>\n        addOne({\n          ...base,\n          ymd,\n          seriesId,\n        }),\n      ),\n    )\n  }\n\n  async function updateTaskSafe(tid: string, ymd: string, patch: Partial<Task>) {\n    const clean: any = {}\n    Object.entries(patch).forEach(([k, v]) => {\n      if (v !== undefined) clean[k] = v\n    })\n    await updateDoc(doc(tasksCollection(ws, ymd), tid), clean)\n  }\n\n  async function deleteTaskOne(tid: string, ymd: string) {\n    await deleteDoc(doc(tasksCollection(ws, ymd), tid))\n  }\n\n  async function deleteAllOccurrences(seriesId: string) {\n    try {\n      console.log(\"[v0] Iniciando exclusão de todas as ocorrências para seriesId:\", seriesId)\n\n      const qy = query(collectionGroup(db, \"tasks\"), where(\"workspaceId\", \"==\", ws), where(\"seriesId\", \"==\", seriesId))\n\n      console.log(\"[v0] Executando query collectionGroup...\")\n      const snap = await getDocs(qy)\n      console.log(\"[v0] Encontradas\", snap.docs.length, \"ocorrências para excluir\")\n\n      if (snap.docs.length === 0) {\n        alert(\"Nenhuma ocorrência encontrada para excluir.\")\n        return\n      }\n\n      await Promise.all(\n        snap.docs.map((d) => {\n          console.log(\"[v0] Excluindo documento:\", d.id)\n          return deleteDoc(d.ref)\n        }),\n      )\n\n      console.log(\"[v0] Todas as ocorrências foram excluídas com sucesso!\")\n      alert(`${snap.docs.length} ocorrência(s) excluída(s) com sucesso!`)\n    } catch (error: any) {\n      console.error(\"[v0] Erro ao excluir todas as ocorrências:\", error)\n\n      const errorMessage = error?.message || String(error)\n      const linkMatch = errorMessage.match(/(https:\\/\\/console\\.firebase\\.google\\.com\\/[^\\s]+)/)\n\n      if (linkMatch && linkMatch[1]) {\n        const indexLink = linkMatch[1]\n        console.log(\"[v0] Link para criar índice:\", indexLink)\n\n        // Mostrar modal com link clicável\n        const shouldOpenLink = confirm(\n          `Esta operação precisa de um índice no Firestore.\\n\\n` +\n            `Clique em OK para abrir o Firebase Console e criar o índice automaticamente.\\n\\n` +\n            `Depois de criar o índice (leva 1-2 minutos), tente novamente.`,\n        )\n\n        if (shouldOpenLink) {\n          window.open(indexLink, \"_blank\")\n        }\n      } else {\n        alert(`Erro ao excluir: ${errorMessage}\\n\\nVerifique as regras do Firestore para collectionGroup.`)\n      }\n    }\n  }\n\n  /* ===========================\n     Filtros e volumetria\n  =========================== */\n  const filteredTasks = useMemo(() => {\n    return tasks.filter((t) => {\n      const okResp = filterResp === \"(todos)\" || t.responsavel === filterResp\n      const okOp = filterOp === \"(todas)\" || t.operacao === filterOp\n      return okResp && okOp\n    })\n  }, [tasks, filterResp, filterOp])\n\n  const stats = useMemo(() => {\n    const nowMin = hhmmToMin(new Date().toTimeString().slice(0, 5))\n    let c = 0,\n      a = 0,\n      p = 0\n    filteredTasks.forEach((t) => {\n      if (t.concluida) c++\n      else if (hhmmToMin(t.fim) <= nowMin) a++\n      else p++\n    })\n    return { total: filteredTasks.length, concluida: c, atrasada: a, noPrazo: p }\n  }, [filteredTasks])\n\n  const volumetriaPorResp = useMemo(() => {\n    const map = new Map<string, number>()\n    filteredTasks.forEach((t) => map.set(t.responsavel, (map.get(t.responsavel) || 0) + 1))\n    return Array.from(map.entries()).sort((a, b) => a[0].localeCompare(b[0]))\n  }, [filteredTasks])\n\n  // Quais colunas mostrar (filtro de responsável)\n  const responsaveisVisiveis = useMemo(() => {\n    return filterResp === \"(todos)\" ? RESPONSAVEIS : RESPONSAVEIS.filter((r) => r === filterResp)\n  }, [filterResp])\n\n  /* ===========================\n     UI helpers\n  =========================== */\n  function shiftDate(days: number) {\n    const d = ymdToDate(selectedDate)\n    d.setDate(d.getDate() + days)\n    setSelectedDate(dateToYMD(d))\n  }\n\n  /* ===========================\n     Render\n  =========================== */\n  return (\n    <div className=\"min-h-screen w-full bg-neutral-950 text-neutral-100 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <header className=\"flex flex-wrap items-center gap-3 justify-between mb-4\">\n          <h1 className=\"text-2xl md:text-3xl font-semibold\">Esteira de Demandas</h1>\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => shiftDate(-1)}\n              className=\"px-2.5 py-1.5 rounded-lg bg-neutral-800 hover:bg-neutral-700\"\n            >\n              ◀︎\n            </button>\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"bg-neutral-900 border border-neutral-700 rounded-lg px-2 py-1.5\"\n            />\n            <button\n              onClick={() => shiftDate(1)}\n              className=\"px-2.5 py-1.5 rounded-lg bg-neutral-800 hover:bg-neutral-700\"\n            >\n              ▶︎\n            </button>\n            <button\n              onClick={() => setShowNew(true)}\n              className=\"px-3 py-1.5 rounded-lg bg-emerald-600 hover:bg-emerald-500 font-medium\"\n            >\n              + Nova demanda\n            </button>\n          </div>\n        </header>\n\n        {/* Filtros */}\n        <div className=\"flex flex-wrap gap-3 mb-4\">\n          <div>\n            <span className=\"block text-sm text-neutral-400 mb-1\">Filtrar por responsável</span>\n            <select\n              value={filterResp}\n              onChange={(e) => setFilterResp(e.target.value)}\n              className=\"bg-neutral-900 border border-neutral-700 rounded-lg px-2 py-1.5\"\n            >\n              <option>(todos)</option>\n              {RESPONSAVEIS.map((r) => (\n                <option key={r}>{r}</option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <span className=\"block text-sm text-neutral-400 mb-1\">Filtrar por operação</span>\n            <select\n              value={filterOp}\n              onChange={(e) => setFilterOp(e.target.value)}\n              className=\"bg-neutral-900 border border-neutral-700 rounded-lg px-2 py-1.5\"\n            >\n              <option>(todas)</option>\n              {OPERACOES.map((o) => (\n                <option key={o}>{o}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* KPIs */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 mb-4\">\n          <Kpi label=\"Demandas no dia\" value={stats.total} color=\"slate\" />\n          <Kpi label=\"Concluídas\" value={stats.concluida} color=\"emerald\" />\n          <Kpi label=\"Atrasadas\" value={stats.atrasada} color=\"red\" />\n          <Kpi label=\"No prazo\" value={stats.noPrazo} color=\"sky\" />\n        </div>\n\n        {/* Volumetria por responsável (voltou) */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mb-4\">\n          <VolumeCard title=\"Por responsável\" rows={volumetriaPorResp} />\n        </div>\n\n        {/* KANBAN por responsável (não usa posicionamento vertical por hora) */}\n        <div\n          className=\"grid gap-4\"\n          style={{ gridTemplateColumns: `repeat(${responsaveisVisiveis.length}, minmax(0, 1fr))` }}\n        >\n          {responsaveisVisiveis.map((resp) => {\n            const list = filteredTasks\n              .filter((t) => t.responsavel === resp)\n              .sort(\n                (a, b) =>\n                  hhmmToMin(a.inicio) - hhmmToMin(b.inicio) ||\n                  hhmmToMin(a.fim) - hhmmToMin(b.fim) ||\n                  a.titulo.localeCompare(b.titulo),\n              )\n\n            return (\n              <div key={resp} className=\"rounded-2xl border border-neutral-800 bg-neutral-900/60 p-3\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h3 className=\"font-medium\">{resp}</h3>\n                  <span className=\"text-sm text-neutral-400\">{list.length}</span>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {list.length === 0 && <div className=\"text-sm text-neutral-500\">Sem demandas neste dia</div>}\n\n                  {list.map((t) => {\n                    let badge = \"NO PRAZO\"\n                    let badgeCls = \"bg-sky-500\"\n                    const nowMin = hhmmToMin(new Date().toTimeString().slice(0, 5))\n                    if (t.concluida) {\n                      badge = \"CONCLUÍDA\"\n                      badgeCls = \"bg-emerald-500\"\n                    } else if (hhmmToMin(t.fim) <= nowMin) {\n                      badge = \"ATRASADA\"\n                      badgeCls = \"bg-red-500\"\n                    }\n\n                    return (\n                      <button\n                        key={t.id}\n                        onClick={() => setEditing(t)}\n                        className=\"w-full text-left rounded-xl bg-neutral-800/70 hover:bg-neutral-800 border border-neutral-700 px-3 py-2 shadow-sm\"\n                        title={`${t.titulo} • ${t.inicio}-${t.fim}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span\n                            className={`text-[10px] uppercase tracking-wide text-neutral-900 px-2 py-0.5 rounded-full ${badgeCls}`}\n                          >\n                            {badge}\n                          </span>\n                          <span className=\"text-xs text-neutral-300\">\n                            {t.inicio} – {t.fim}\n                          </span>\n                        </div>\n                        <div className=\"mt-1 font-medium\">{t.titulo}</div>\n                        {t.operacao && <div className=\"text-xs text-neutral-400 mt-0.5\">Operação: {t.operacao}</div>}\n                      </button>\n                    )\n                  })}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n\n      {/* Modal Nova */}\n      {showNew && (\n        <TaskModal\n          title=\"Nova demanda\"\n          onCancel={() => setShowNew(false)}\n          onSubmit={async (payload) => {\n            try {\n              await addTaskWithRecurrence(\n                {\n                  titulo: payload.titulo.trim() || \"Demanda\",\n                  inicio: payload.inicio,\n                  fim: payload.fim,\n                  concluida: false,\n                  responsavel: payload.responsavel,\n                  operacao: payload.operacao,\n                  ymd: selectedDate,\n                  recKind: payload.recKind,\n                  seriesId: undefined,\n                  workspaceId: ws,\n                  createdAt: Date.now(),\n                } as any,\n                payload.weekDay,\n              )\n              setShowNew(false)\n            } catch (e: any) {\n              alert(`Não foi possível salvar a demanda.\\n${String(e?.message || e)}`)\n            }\n          }}\n        />\n      )}\n\n      {/* Modal Editar */}\n      {editing && (\n        <EditModal\n          task={editing}\n          onCancel={() => setEditing(null)}\n          onDeleteOne={async () => {\n            await deleteTaskOne(editing.id, editing.ymd)\n            setEditing(null)\n          }}\n          onDeleteAll={\n            editing.seriesId\n              ? async () => {\n                  if (confirm(\"Excluir TODAS as ocorrências desta demanda recorrente?\")) {\n                    try {\n                      await deleteAllOccurrences(editing.seriesId)\n                    } catch (error: any) {\n                      console.error(\"[v0] Erro ao excluir todas as ocorrências:\", error)\n                      alert(`Erro: ${error?.message || error}`)\n                    }\n                  }\n                }\n              : undefined\n          }\n          onSubmit={async (patch) => {\n            await updateTaskSafe(editing.id, editing.ymd, patch)\n            setEditing(null)\n          }}\n        />\n      )}\n    </div>\n  )\n}\n\n/* ===========================\n   Componentes UI\n=========================== */\nfunction Kpi({\n  label,\n  value,\n  color,\n}: {\n  label: string\n  value: number\n  color: \"emerald\" | \"red\" | \"sky\" | \"slate\"\n}) {\n  const bar =\n    color === \"emerald\"\n      ? \"bg-emerald-500\"\n      : color === \"red\"\n        ? \"bg-red-500\"\n        : color === \"sky\"\n          ? \"bg-sky-500\"\n          : \"bg-slate-400\"\n  return (\n    <div className=\"rounded-2xl border border-neutral-800 bg-neutral-900/60 p-4 shadow-lg relative overflow-hidden\">\n      <div className={`absolute inset-y-0 left-0 w-1.5 ${bar}`} />\n      <div className=\"text-sm text-neutral-400 flex items-center gap-2\">\n        <span className={`inline-block w-2 h-2 rounded-full ${bar}`} />\n        <span>{label}</span>\n      </div>\n      <div className=\"mt-2 text-3xl font-semibold\">{value}</div>\n    </div>\n  )\n}\n\nfunction VolumeCard({ title, rows }: { title: string; rows: [string, number][] }) {\n  return (\n    <div className=\"rounded-2xl border border-neutral-800 bg-neutral-900/60 p-4 shadow-lg\">\n      <h3 className=\"text-sm text-neutral-300 mb-2\">{title}</h3>\n      <div className=\"space-y-2\">\n        {rows.length === 0 && <div className=\"text-sm text-neutral-500\">Sem dados</div>}\n        {rows.map(([k, v]) => (\n          <div key={k} className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-neutral-300\">{k || \"—\"}</span>\n            <span className=\"text-neutral-100 font-medium\">{v}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\n/* ---------- Modais ---------- */\ntype ModalTaskInput = {\n  titulo: string\n  responsavel: string\n  operacao: string\n  inicio: string\n  fim: string\n  recKind?: RecKind\n  weekDay?: number // Adicionado para escolher o dia da semana\n}\n\nfunction TaskModal({\n  title,\n  onCancel,\n  onSubmit,\n}: {\n  title: string\n  onCancel: () => void\n  onSubmit: (t: ModalTaskInput) => Promise<void>\n}) {\n  const [titulo, setTitulo] = useState(\"\")\n  const [responsavel, setResponsavel] = useState(RESPONSAVEIS[0])\n  const [operacao, setOperacao] = useState(OPERACOES[0])\n  const [inicio, setInicio] = useState(\"08:00\")\n  const [fim, setFim] = useState(\"09:00\")\n  const [recKind, setRecKind] = useState<RecKind>(\"once\")\n  const [weekDay, setWeekDay] = useState<number>(1) // Segunda-feira por padrão\n\n  return (\n    <Modal onClose={onCancel}>\n      <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Nome da demanda</span>\n          <input\n            value={titulo}\n            onChange={(e) => setTitulo(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n            placeholder=\"Ex.: Enviar funil diário\"\n          />\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Responsável</span>\n          <select\n            value={responsavel}\n            onChange={(e) => setResponsavel(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          >\n            {RESPONSAVEIS.map((r) => (\n              <option key={r}>{r}</option>\n            ))}\n          </select>\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Operação</span>\n          <select\n            value={operacao}\n            onChange={(e) => setOperacao(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          >\n            {OPERACOES.map((o) => (\n              <option key={o}>{o}</option>\n            ))}\n          </select>\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Recorrência</span>\n          <select\n            value={recKind}\n            onChange={(e) => setRecKind(e.target.value as RecKind)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          >\n            <option value=\"once\">Apenas este dia</option>\n            <option value=\"daily\">Todos os dias</option>\n            <option value=\"weekly\">Uma vez por semana</option>\n          </select>\n        </label>\n\n        {recKind === \"weekly\" && (\n          <label className=\"text-sm md:col-span-2\">\n            <span className=\"block mb-1 text-neutral-300\">Dia da semana</span>\n            <select\n              value={weekDay}\n              onChange={(e) => setWeekDay(Number(e.target.value))}\n              className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n            >\n              <option value={0}>Domingo</option>\n              <option value={1}>Segunda-feira</option>\n              <option value={2}>Terça-feira</option>\n              <option value={3}>Quarta-feira</option>\n              <option value={4}>Quinta-feira</option>\n              <option value={5}>Sexta-feira</option>\n              <option value={6}>Sábado</option>\n            </select>\n          </label>\n        )}\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Hora início</span>\n          <input\n            type=\"time\"\n            value={inicio}\n            onChange={(e) => setInicio(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          />\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Hora fim</span>\n          <input\n            type=\"time\"\n            value={fim}\n            onChange={(e) => setFim(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          />\n        </label>\n      </div>\n\n      <div className=\"flex justify-end gap-2 mt-4\">\n        <button onClick={onCancel} className=\"px-3 py-2 rounded-lg bg-neutral-800 hover:bg-neutral-700\">\n          Cancelar\n        </button>\n        <button\n          onClick={async () => {\n            if (!isHHMM(inicio) || !isHHMM(fim) || hhmmToMin(fim) <= hhmmToMin(inicio)) {\n              alert(\"Verifique os horários.\")\n              return\n            }\n            await onSubmit({\n              titulo: titulo.trim() || \"Demanda\",\n              responsavel,\n              operacao,\n              inicio,\n              fim,\n              recKind,\n              weekDay: recKind === \"weekly\" ? weekDay : undefined,\n            })\n          }}\n          className=\"px-3 py-2 rounded-lg bg-emerald-600 hover:bg-emerald-500 font-medium\"\n        >\n          Salvar\n        </button>\n      </div>\n    </Modal>\n  )\n}\n\nfunction EditModal({\n  task,\n  onCancel,\n  onDeleteOne,\n  onDeleteAll,\n  onSubmit,\n}: {\n  task: Task\n  onCancel: () => void\n  onDeleteOne: () => Promise<void>\n  onDeleteAll?: () => Promise<void>\n  onSubmit: (patch: Partial<Task>) => Promise<void>\n}) {\n  const [titulo, setTitulo] = useState(task.titulo)\n  const [responsavel, setResponsavel] = useState(task.responsavel || RESPONSAVEIS[0])\n  const [operacao, setOperacao] = useState(task.operacao || OPERACOES[0])\n  const [inicio, setInicio] = useState(task.inicio)\n  const [fim, setFim] = useState(task.fim)\n  const [concluida, setConcluida] = useState(task.concluida)\n\n  return (\n    <Modal onClose={onCancel}>\n      <h3 className=\"text-lg font-semibold mb-4\">Editar demanda</h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Nome da demanda</span>\n          <input\n            value={titulo}\n            onChange={(e) => setTitulo(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          />\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Responsável</span>\n          <select\n            value={responsavel}\n            onChange={(e) => setResponsavel(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          >\n            {RESPONSAVEIS.map((r) => (\n              <option key={r}>{r}</option>\n            ))}\n          </select>\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Operação</span>\n          <select\n            value={operacao}\n            onChange={(e) => setOperacao(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          >\n            {OPERACOES.map((o) => (\n              <option key={o}>{o}</option>\n            ))}\n          </select>\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Recorrência (informativo)</span>\n          <input\n            disabled\n            value={\n              task.recKind === \"daily\"\n                ? \"todos os dias\"\n                : task.recKind === \"weekly\"\n                  ? \"uma vez por semana\"\n                  : `apenas ${task.ymd}`\n            }\n            className=\"w-full bg-neutral-900 border border-neutral-800 rounded-lg px-3 py-2 text-neutral-500\"\n          />\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Hora início</span>\n          <input\n            type=\"time\"\n            value={inicio}\n            onChange={(e) => setInicio(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          />\n        </label>\n\n        <label className=\"text-sm\">\n          <span className=\"block mb-1 text-neutral-300\">Hora fim</span>\n          <input\n            type=\"time\"\n            value={fim}\n            onChange={(e) => setFim(e.target.value)}\n            className=\"w-full bg-neutral-900 border border-neutral-700 rounded-lg px-3 py-2\"\n          />\n        </label>\n      </div>\n\n      <label className=\"mt-2 flex items-center gap-2 text-sm\">\n        <input type=\"checkbox\" checked={concluida} onChange={(e) => setConcluida(e.target.checked)} />\n        Concluída\n      </label>\n\n      <div className=\"flex flex-wrap justify-between gap-2 mt-4\">\n        <div className=\"flex gap-2\">\n          <button onClick={onDeleteOne} className=\"px-3 py-2 rounded-lg bg-red-600 hover:bg-red-500\">\n            Excluir esta\n          </button>\n          {onDeleteAll && (\n            <button\n              onClick={async () => {\n                if (confirm(\"Excluir TODAS as ocorrências desta demanda recorrente?\")) {\n                  try {\n                    await onDeleteAll()\n                  } catch (error: any) {\n                    console.error(\"[v0] Erro ao excluir todas as ocorrências:\", error)\n                    alert(`Erro: ${error?.message || error}`)\n                  }\n                }\n              }}\n              title=\"Remove todas as ocorrências desta série recorrente\"\n              className=\"px-3 py-2 rounded-lg bg-red-700 hover:bg-red-600\"\n            >\n              Excluir todos os dias\n            </button>\n          )}\n        </div>\n        <div className=\"flex gap-2\">\n          <button onClick={onCancel} className=\"px-3 py-2 rounded-lg bg-neutral-800 hover:bg-neutral-700\">\n            Cancelar\n          </button>\n          <button\n            onClick={async () => {\n              if (!isHHMM(inicio) || !isHHMM(fim) || hhmmToMin(fim) <= hhmmToMin(inicio)) {\n                alert(\"Verifique os horários.\")\n                return\n              }\n              await onSubmit({\n                titulo: titulo.trim() || \"Demanda\",\n                inicio,\n                fim,\n                responsavel,\n                operacao,\n                concluida,\n              })\n            }}\n            className=\"px-3 py-2 rounded-lg bg-emerald-600 hover:bg-emerald-500 font-medium\"\n          >\n            Salvar\n          </button>\n        </div>\n      </div>\n    </Modal>\n  )\n}\n\nfunction Modal({ children, onClose }: { children: React.ReactNode; onClose: () => void }) {\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"absolute inset-0 bg-black/60\" onClick={onClose} />\n      <div className=\"relative bg-neutral-900 border border-neutral-700 rounded-2xl p-5 w-full max-w-2xl shadow-xl\">\n        <button\n          className=\"absolute right-3 top-3 text-neutral-400 hover:text-neutral-200\"\n          onClick={onClose}\n          aria-label=\"Fechar\"\n        >\n          ✕\n        </button>\n        {children}\n      </div>\n    </div>\n  )\n}\n","size_bytes":30711},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/dashboard/tickets-table.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { GlpiTicket } from \"@shared/schema\";\nimport { GLPI_STATUS, GLPI_PRIORITY, GLPI_TYPE } from \"@shared/schema\";\nimport { formatDateTime } from \"@/lib/utils\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface TicketsTableProps {\n  tickets?: GlpiTicket[];\n  isLoading: boolean;\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n}\n\nexport function TicketsTable({ tickets, isLoading, currentPage, totalPages, onPageChange }: TicketsTableProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"overflow-hidden\">\n        <div className=\"p-6 space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"flex items-center gap-4\">\n              <Skeleton className=\"h-12 w-12 rounded\" />\n              <div className=\"flex-1 space-y-2\">\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    );\n  }\n\n  if (!tickets || tickets.length === 0) {\n    return (\n      <Card className=\"p-12 text-center\">\n        <p className=\"text-muted-foreground\">Nenhum ticket encontrado</p>\n      </Card>\n    );\n  }\n\n  const getStatusBadgeVariant = (status: number): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    if (status === 4 || status === 5) return \"secondary\";\n    if (status === 1) return \"default\";\n    if (status === 3) return \"outline\";\n    return \"outline\";\n  };\n\n  const getPriorityBadgeVariant = (priority: number): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    if (priority >= 5) return \"destructive\";\n    if (priority >= 4) return \"default\";\n    return \"secondary\";\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted/50 border-b border-border\">\n              <tr>\n                <th className=\"text-left px-4 py-3 text-sm font-medium\">ID</th>\n                <th className=\"text-left px-4 py-3 text-sm font-medium\">Título</th>\n                <th className=\"text-left px-4 py-3 text-sm font-medium\">Status</th>\n                <th className=\"text-left px-4 py-3 text-sm font-medium\">Prioridade</th>\n                <th className=\"text-left px-4 py-3 text-sm font-medium\">Tipo</th>\n                <th className=\"text-left px-4 py-3 text-sm font-medium\">Data de Criação</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {tickets.map((ticket) => (\n                <tr\n                  key={ticket.id}\n                  className=\"hover-elevate\"\n                  data-testid={`ticket-row-${ticket.id}`}\n                >\n                  <td className=\"px-4 py-3 text-sm font-mono\">#{ticket.id}</td>\n                  <td className=\"px-4 py-3 text-sm max-w-md truncate\" title={ticket.name}>\n                    {ticket.name}\n                  </td>\n                  <td className=\"px-4 py-3\">\n                    <Badge variant={getStatusBadgeVariant(ticket.status)}>\n                      {GLPI_STATUS[ticket.status as keyof typeof GLPI_STATUS] || `Status ${ticket.status}`}\n                    </Badge>\n                  </td>\n                  <td className=\"px-4 py-3\">\n                    <Badge variant={getPriorityBadgeVariant(ticket.priority)}>\n                      {GLPI_PRIORITY[ticket.priority as keyof typeof GLPI_PRIORITY] || `P${ticket.priority}`}\n                    </Badge>\n                  </td>\n                  <td className=\"px-4 py-3 text-sm\">\n                    {GLPI_TYPE[ticket.type as keyof typeof GLPI_TYPE] || \"-\"}\n                  </td>\n                  <td className=\"px-4 py-3 text-sm text-muted-foreground\">\n                    {formatDateTime(ticket.date)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <p className=\"text-sm text-muted-foreground\">\n            Página {currentPage} de {totalPages}\n          </p>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange(currentPage - 1)}\n              disabled={currentPage === 1}\n              data-testid=\"button-prev-page\"\n            >\n              <ChevronLeft className=\"h-4 w-4 mr-1\" />\n              Anterior\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onPageChange(currentPage + 1)}\n              disabled={currentPage === totalPages}\n              data-testid=\"button-next-page\"\n            >\n              Próxima\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5218},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// ===========================\n// User Schema (Optional for future auth)\n// ===========================\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// ===========================\n// Esteira de Demandas Types (Firebase)\n// ===========================\nexport type RecKind = \"once\" | \"daily\" | \"weekly\";\n\nexport const taskSchema = z.object({\n  id: z.string(),\n  titulo: z.string(),\n  inicio: z.string(), // HH:MM\n  fim: z.string(), // HH:MM\n  concluida: z.boolean(),\n  responsavel: z.string(),\n  operacao: z.string(),\n  ymd: z.string(), // YYYY-MM-DD\n  seriesId: z.string().optional(),\n  recKind: z.enum([\"once\", \"daily\", \"weekly\"]).optional(),\n  workspaceId: z.string(),\n  createdAt: z.number(),\n});\n\nexport type Task = z.infer<typeof taskSchema>;\n\nexport const insertTaskSchema = taskSchema.omit({ id: true });\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\n// Constantes para Esteira de Demandas\nexport const RESPONSAVEIS = [\"Bárbara Arruda\", \"Gabriel Bion\", \"Luciano Miranda\"];\n\nexport const OPERACOES = [\n  \"FMU\",\n  \"INSPIRALI\",\n  \"COGNA\",\n  \"SINGULARIDADES\",\n  \"PÓS COGNA\",\n  \"UFEM\",\n  \"TELECOM\",\n  \"FGTS\",\n  \"DIROMA\",\n  \"ESTÁCIO\",\n];\n\n// ===========================\n// DashRealtime Types (GLPI)\n// ===========================\n\n// GLPI Ticket Schema based on API structure\nexport const glpiTicketSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  content: z.string().optional(),\n  status: z.number(), // 1=New, 2=Processing, 3=Pending, 4=Solved, 5=Closed\n  urgency: z.number(), // 1-5\n  impact: z.number(), // 1-5\n  priority: z.number(), // 1-6\n  type: z.number(), // 1=Incident, 2=Request\n  date: z.string(),\n  date_mod: z.string(),\n  entities_id: z.number(),\n  itilcategories_id: z.number().optional(),\n  users_id_recipient: z.number().optional(),\n  locations_id: z.number().optional(),\n  requesttypes_id: z.number().optional(),\n  \n  // Assignment fields\n  users_id_assign: z.number().optional(),\n  groups_id_assign: z.number().optional(),\n  users_id_lastupdater: z.number().optional(),\n  \n  // Date fields for time tracking\n  closedate: z.string().nullable().optional(),\n  solvedate: z.string().nullable().optional(),\n  time_to_resolve: z.string().nullable().optional(),\n  time_to_own: z.string().nullable().optional(),\n  begin_waiting_date: z.string().nullable().optional(),\n  \n  // Time metrics (in seconds)\n  waiting_duration: z.number().optional(),\n  actiontime: z.number().optional(),\n  takeintoaccount_delay_stat: z.number().optional(),\n  solve_delay_stat: z.number().optional(),\n  close_delay_stat: z.number().optional(),\n  \n  // SLA/OLA fields\n  slas_id_ttr: z.number().optional(),\n  slas_id_tto: z.number().optional(),\n  olas_id_ttr: z.number().optional(),\n  olas_id_tto: z.number().optional(),\n  \n  // Validation\n  global_validation: z.number().optional(),\n});\n\nexport type GlpiTicket = z.infer<typeof glpiTicketSchema>;\n\n// Filter schema\nexport const ticketFiltersSchema = z.object({\n  status: z.array(z.number()).optional(),\n  priority: z.array(z.number()).optional(),\n  category: z.array(z.number()).optional(),\n  search: z.string().optional(),\n  dateFrom: z.string().optional(),\n  dateTo: z.string().optional(),\n  closeDateFrom: z.string().optional(),\n  closeDateTo: z.string().optional(),\n  type: z.array(z.number()).optional(),\n  assignedTo: z.array(z.number()).optional(),\n  assignedGroup: z.array(z.number()).optional(),\n  name: z.string().optional(),\n  users_id_recipient: z.array(z.number()).optional(),\n});\n\nexport type TicketFilters = z.infer<typeof ticketFiltersSchema>;\n\n// Stats schema for KPI cards\nexport const ticketStatsSchema = z.object({\n  total: z.number(),\n  new: z.number(),\n  inProgress: z.number(),\n  pending: z.number(),\n  solved: z.number(),\n  closed: z.number(),\n  \n  // Time-based metrics (all in seconds, to be formatted as HH:MM:SS on frontend)\n  avgCloseDelay: z.number().optional(),\n  avgSolveDelay: z.number().optional(),\n  avgTakeIntoAccountDelay: z.number().optional(),\n  avgWaitingDuration: z.number().optional(),\n  \n  // SLA metrics\n  slaCompliance: z.number().optional(),\n  slaViolations: z.number().optional(),\n  \n  byStatus: z.array(z.object({\n    status: z.number(),\n    count: z.number(),\n  })),\n  byPriority: z.array(z.object({\n    priority: z.number(),\n    count: z.number(),\n  })),\n  byType: z.array(z.object({\n    type: z.number(),\n    count: z.number(),\n  })),\n  byCategory: z.array(z.object({\n    categoryId: z.number(),\n    categoryName: z.string(),\n    count: z.number(),\n  })).optional(),\n  topRequesters: z.array(z.object({\n    userId: z.number(),\n    userName: z.string(),\n    count: z.number(),\n  })).optional(),\n  timeline: z.array(z.object({\n    date: z.string(),\n    count: z.number(),\n  })),\n  timelineComparison: z.array(z.object({\n    date: z.string(),\n    opened: z.number(),\n    closed: z.number(),\n  })).optional(),\n});\n\nexport type TicketStats = z.infer<typeof ticketStatsSchema>;\n\n// GLPI Status mapping\nexport const GLPI_STATUS = {\n  1: \"Novo\",\n  2: \"Em Processamento\",\n  3: \"Pendente\",\n  4: \"Resolvido\",\n  5: \"Fechado\",\n  6: \"Cancelado\",\n} as const;\n\n// GLPI Priority mapping\nexport const GLPI_PRIORITY = {\n  1: \"Muito Baixa\",\n  2: \"Baixa\",\n  3: \"Média\",\n  4: \"Alta\",\n  5: \"Muito Alta\",\n  6: \"Urgente\",\n} as const;\n\n// GLPI Type mapping\nexport const GLPI_TYPE = {\n  1: \"Incidente\",\n  2: \"Requisição\",\n} as const;\n","size_bytes":5896},"client/src/lib/firebase.ts":{"content":"import { initializeApp, getApps } from \"firebase/app\";\nimport { getFirestore, collection, doc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = getApps().length ? getApps()[0] : initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\n\n// Tarefas do dia: workspaces/{ws}/days/{ymd}/tasks/*\nexport function tasksCollection(workspaceId: string, ymd: string) {\n  return collection(doc(collection(db, \"workspaces\"), workspaceId), \"days\", ymd, \"tasks\");\n}\n","size_bytes":826},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/esteira/task-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { RESPONSAVEIS, OPERACOES } from \"@shared/schema\";\nimport type { RecKind } from \"@shared/schema\";\n\ntype ModalTaskInput = {\n  titulo: string;\n  responsavel: string;\n  operacao: string;\n  inicio: string;\n  fim: string;\n  recKind?: RecKind;\n  weekDay?: number;\n};\n\ninterface TaskModalProps {\n  title: string;\n  onCancel: () => void;\n  onSubmit: (t: ModalTaskInput) => Promise<void>;\n}\n\nexport function TaskModal({ title, onCancel, onSubmit }: TaskModalProps) {\n  const [titulo, setTitulo] = useState(\"\");\n  const [responsavel, setResponsavel] = useState(RESPONSAVEIS[0]);\n  const [operacao, setOperacao] = useState(OPERACOES[0]);\n  const [inicio, setInicio] = useState(\"08:00\");\n  const [fim, setFim] = useState(\"09:00\");\n  const [recKind, setRecKind] = useState<RecKind>(\"once\");\n  const [weekDay, setWeekDay] = useState<number>(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    try {\n      await onSubmit({\n        titulo,\n        responsavel,\n        operacao,\n        inicio,\n        fim,\n        recKind,\n        weekDay: recKind === \"weekly\" ? weekDay : undefined,\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open onOpenChange={(open) => !open && onCancel()}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"titulo\">Nome da demanda</Label>\n            <Input\n              id=\"titulo\"\n              value={titulo}\n              onChange={(e) => setTitulo(e.target.value)}\n              placeholder=\"Ex.: Enviar funil diário\"\n              data-testid=\"input-task-title\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"responsavel\">Responsável</Label>\n            <Select value={responsavel} onValueChange={setResponsavel}>\n              <SelectTrigger id=\"responsavel\" data-testid=\"select-responsible\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {RESPONSAVEIS.map((r) => (\n                  <SelectItem key={r} value={r}>\n                    {r}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"operacao\">Operação</Label>\n            <Select value={operacao} onValueChange={setOperacao}>\n              <SelectTrigger id=\"operacao\" data-testid=\"select-operation\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {OPERACOES.map((o) => (\n                  <SelectItem key={o} value={o}>\n                    {o}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"recKind\">Recorrência</Label>\n            <Select value={recKind} onValueChange={(v) => setRecKind(v as RecKind)}>\n              <SelectTrigger id=\"recKind\" data-testid=\"select-recurrence\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"once\">Apenas este dia</SelectItem>\n                <SelectItem value=\"daily\">Todos os dias</SelectItem>\n                <SelectItem value=\"weekly\">Uma vez por semana</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {recKind === \"weekly\" && (\n            <div className=\"space-y-2 md:col-span-2\">\n              <Label htmlFor=\"weekDay\">Dia da semana</Label>\n              <Select value={String(weekDay)} onValueChange={(v) => setWeekDay(Number(v))}>\n                <SelectTrigger id=\"weekDay\" data-testid=\"select-weekday\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"0\">Domingo</SelectItem>\n                  <SelectItem value=\"1\">Segunda-feira</SelectItem>\n                  <SelectItem value=\"2\">Terça-feira</SelectItem>\n                  <SelectItem value=\"3\">Quarta-feira</SelectItem>\n                  <SelectItem value=\"4\">Quinta-feira</SelectItem>\n                  <SelectItem value=\"5\">Sexta-feira</SelectItem>\n                  <SelectItem value=\"6\">Sábado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"inicio\">Hora de início</Label>\n            <Input\n              id=\"inicio\"\n              type=\"time\"\n              value={inicio}\n              onChange={(e) => setInicio(e.target.value)}\n              data-testid=\"input-start-time\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fim\">Hora de término</Label>\n            <Input\n              id=\"fim\"\n              type=\"time\"\n              value={fim}\n              onChange={(e) => setFim(e.target.value)}\n              data-testid=\"input-end-time\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2 mt-4\">\n          <Button variant=\"outline\" onClick={onCancel} disabled={isSubmitting} data-testid=\"button-cancel\">\n            Cancelar\n          </Button>\n          <Button onClick={handleSubmit} disabled={isSubmitting} data-testid=\"button-save\">\n            {isSubmitting ? \"Salvando...\" : \"Salvar\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6085},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/dashboard/kpi-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { TicketStats } from \"@shared/schema\";\nimport { TrendingUp, Clock, CheckCircle2, AlertCircle, Timer, Hourglass, Zap, PauseCircle } from \"lucide-react\";\nimport { formatSecondsToHHMMSS } from \"@/lib/utils\";\n\ninterface KPICardsProps {\n  stats?: TicketStats;\n  isLoading: boolean;\n}\n\nexport function KPICards({ stats, isLoading }: KPICardsProps) {\n  const countKpis = [\n    {\n      label: \"Total de Tickets\",\n      value: stats?.total ?? 0,\n      icon: TrendingUp,\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\",\n      testId: \"kpi-total\",\n    },\n    {\n      label: \"Novos\",\n      value: stats?.new ?? 0,\n      icon: AlertCircle,\n      color: \"text-yellow-500\",\n      bgColor: \"bg-yellow-500/10\",\n      testId: \"kpi-new\",\n    },\n    {\n      label: \"Em Processamento\",\n      value: stats?.inProgress ?? 0,\n      icon: Clock,\n      color: \"text-orange-500\",\n      bgColor: \"bg-orange-500/10\",\n      testId: \"kpi-in-progress\",\n    },\n    {\n      label: \"Resolvidos\",\n      value: stats?.solved ?? 0,\n      icon: CheckCircle2,\n      color: \"text-green-500\",\n      bgColor: \"bg-green-500/10\",\n      testId: \"kpi-solved\",\n    },\n  ];\n\n  const timeKpis = [\n    {\n      label: \"Tempo Médio de Fechamento\",\n      value: formatSecondsToHHMMSS(stats?.avgCloseDelay ?? 0),\n      icon: Timer,\n      color: \"text-purple-500\",\n      bgColor: \"bg-purple-500/10\",\n      testId: \"kpi-avg-close-delay\",\n    },\n    {\n      label: \"Tempo Médio de Resolução\",\n      value: formatSecondsToHHMMSS(stats?.avgSolveDelay ?? 0),\n      icon: Zap,\n      color: \"text-cyan-500\",\n      bgColor: \"bg-cyan-500/10\",\n      testId: \"kpi-avg-solve-delay\",\n    },\n    {\n      label: \"Tempo Até Primeiro Atendimento\",\n      value: formatSecondsToHHMMSS(stats?.avgTakeIntoAccountDelay ?? 0),\n      icon: Hourglass,\n      color: \"text-amber-500\",\n      bgColor: \"bg-amber-500/10\",\n      testId: \"kpi-avg-takeintoaccount-delay\",\n    },\n    {\n      label: \"Tempo Médio em Espera\",\n      value: formatSecondsToHHMMSS(stats?.avgWaitingDuration ?? 0),\n      icon: PauseCircle,\n      color: \"text-rose-500\",\n      bgColor: \"bg-rose-500/10\",\n      testId: \"kpi-avg-waiting-duration\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={`count-${i}`}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-4 w-24 mb-4\" />\n                <Skeleton className=\"h-8 w-16\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={`time-${i}`}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-4 w-32 mb-4\" />\n                <Skeleton className=\"h-8 w-24\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Count KPIs */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {countKpis.map((kpi) => (\n          <Card key={kpi.label} className=\"overflow-hidden hover-elevate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`p-2 rounded-lg ${kpi.bgColor}`}>\n                  <kpi.icon className={`h-5 w-5 ${kpi.color}`} />\n                </div>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-muted-foreground\">{kpi.label}</p>\n                <p className=\"text-3xl font-bold\" data-testid={kpi.testId}>\n                  {kpi.value}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Time KPIs */}\n      <div>\n        <h3 className=\"text-lg font-semibold mb-3\">Métricas de Tempo</h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {timeKpis.map((kpi) => (\n            <Card key={kpi.label} className=\"overflow-hidden hover-elevate\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`p-2 rounded-lg ${kpi.bgColor}`}>\n                    <kpi.icon className={`h-5 w-5 ${kpi.color}`} />\n                  </div>\n                </div>\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm text-muted-foreground\">{kpi.label}</p>\n                  <p className=\"text-2xl font-mono font-bold\" data-testid={kpi.testId}>\n                    {kpi.value}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5030},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"attached_assets/useTasks_1760837559259.ts":{"content":"// src/hooks/useTasks.ts\nimport { useEffect, useState, useCallback } from 'react';\nimport { CLOUD_ENABLED, supabase, TaskRow } from '../lib/supabase';\n\nexport type UTask = TaskRow;\n\nconst LS_PREFIX = 'demand_timeline_tasks_v1__';\nconst lsKey = (ws: string) => `${LS_PREFIX}${ws}`;\n\n// ---- LocalStorage (fallback) ----\nfunction loadLocal(ws: string): UTask[] {\n  try {\n    const raw = localStorage.getItem(lsKey(ws));\n    if (!raw) return [];\n    const data = JSON.parse(raw);\n    if (Array.isArray(data)) return data;\n  } catch {}\n  return [];\n}\nfunction saveLocal(ws: string, tasks: UTask[]) {\n  localStorage.setItem(lsKey(ws), JSON.stringify(tasks));\n}\n\nexport function useTasks(workspace: string) {\n  const [tasks, setTasks] = useState<UTask[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchTasks = useCallback(async () => {\n    if (!CLOUD_ENABLED || !supabase) {\n      setTasks(loadLocal(workspace));\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    const { data, error } = await supabase\n      .from('task_templates')\n      .select('*')\n      .eq('workspace', workspace)\n      .order('created_at', { ascending: true });\n\n    if (error) {\n      console.error('[fetchTasks]', error);\n      setLoading(false);\n      return;\n    }\n    setTasks((data ?? []) as UTask[]);\n    setLoading(false);\n  }, [workspace]);\n\n  useEffect(() => { fetchTasks(); }, [fetchTasks]);\n\n  // Realtime\n  useEffect(() => {\n    if (!CLOUD_ENABLED || !supabase) return;\n    const ch = supabase\n      .channel('task_templates:' + workspace)\n      .on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'task_templates', filter: `workspace=eq.${workspace}` },\n        () => fetchTasks()\n      )\n      .subscribe();\n    return () => { supabase.removeChannel(ch); };\n  }, [workspace, fetchTasks]);\n\n  // ---- CRUD ----\n  async function addTask(input: Omit<UTask, 'id' | 'created_at' | 'workspace'>) {\n    if (CLOUD_ENABLED && supabase) {\n      const { error } = await supabase\n        .from('task_templates')\n        .insert({\n          workspace,\n          titulo: input.titulo,\n          inicio: input.inicio,\n          fim: input.fim,\n          concluida: !!input.concluida,\n          rec: input.rec ?? { kind: 'daily' }\n        });\n      if (error) console.error('[insert]', error);\n    } else {\n      const row: UTask = {\n        id: crypto.randomUUID(),\n        workspace,\n        titulo: input.titulo,\n        inicio: input.inicio,\n        fim: input.fim,\n        concluida: !!input.concluida,\n        rec: input.rec ?? { kind: 'daily' },\n        created_at: new Date().toISOString()\n      };\n      const next = [...tasks, row];\n      setTasks(next);\n      saveLocal(workspace, next);\n    }\n  }\n\n  async function toggleDone(id: string, concluida: boolean) {\n    if (CLOUD_ENABLED && supabase) {\n      const { error } = await supabase\n        .from('task_templates')\n        .update({ concluida })\n        .eq('id', id)\n        .eq('workspace', workspace);\n      if (error) console.error('[update]', error);\n    } else {\n      const next = tasks.map(t => t.id === id ? { ...t, concluida } : t);\n      setTasks(next);\n      saveLocal(workspace, next);\n    }\n  }\n\n  async function removeTask(id: string) {\n    if (CLOUD_ENABLED && supabase) {\n      const { error } = await supabase\n        .from('task_templates')\n        .delete()\n        .eq('id', id)\n        .eq('workspace', workspace);\n      if (error) console.error('[delete]', error);\n    } else {\n      const next = tasks.filter(t => t.id !== id);\n      setTasks(next);\n      saveLocal(workspace, next);\n    }\n  }\n\n  async function clearWorkspace() {\n    if (CLOUD_ENABLED && supabase) {\n      const { error } = await supabase\n        .from('task_templates')\n        .delete()\n        .eq('workspace', workspace);\n      if (error) console.error('[clear]', error);\n    } else {\n      setTasks([]);\n      saveLocal(workspace, []);\n    }\n  }\n\n  return { tasks, loading, addTask, toggleDone, removeTask, clearWorkspace, cloud: CLOUD_ENABLED };\n}\n","size_bytes":4045},"client/src/components/esteira/edit-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { RESPONSAVEIS, OPERACOES } from \"@shared/schema\";\nimport type { Task } from \"@shared/schema\";\nimport { Trash2 } from \"lucide-react\";\n\ninterface EditModalProps {\n  task: Task;\n  onCancel: () => void;\n  onDeleteOne: () => Promise<void>;\n  onDeleteAll?: () => Promise<void>;\n  onSubmit: (patch: Partial<Task>) => Promise<void>;\n}\n\nexport function EditModal({ task, onCancel, onDeleteOne, onDeleteAll, onSubmit }: EditModalProps) {\n  const [titulo, setTitulo] = useState(task.titulo);\n  const [responsavel, setResponsavel] = useState(task.responsavel);\n  const [operacao, setOperacao] = useState(task.operacao);\n  const [inicio, setInicio] = useState(task.inicio);\n  const [fim, setFim] = useState(task.fim);\n  const [concluida, setConcluida] = useState(task.concluida);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async () => {\n    setIsSubmitting(true);\n    try {\n      await onSubmit({\n        titulo,\n        responsavel,\n        operacao,\n        inicio,\n        fim,\n        concluida,\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (confirm(\"Excluir esta demanda?\")) {\n      await onDeleteOne();\n    }\n  };\n\n  return (\n    <Dialog open onOpenChange={(open) => !open && onCancel()}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Editar demanda</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"titulo\">Nome da demanda</Label>\n            <Input\n              id=\"titulo\"\n              value={titulo}\n              onChange={(e) => setTitulo(e.target.value)}\n              data-testid=\"input-edit-title\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"responsavel\">Responsável</Label>\n            <Select value={responsavel} onValueChange={setResponsavel}>\n              <SelectTrigger id=\"responsavel\" data-testid=\"select-edit-responsible\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {RESPONSAVEIS.map((r) => (\n                  <SelectItem key={r} value={r}>\n                    {r}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"operacao\">Operação</Label>\n            <Select value={operacao} onValueChange={setOperacao}>\n              <SelectTrigger id=\"operacao\" data-testid=\"select-edit-operation\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {OPERACOES.map((o) => (\n                  <SelectItem key={o} value={o}>\n                    {o}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"inicio\">Hora de início</Label>\n            <Input\n              id=\"inicio\"\n              type=\"time\"\n              value={inicio}\n              onChange={(e) => setInicio(e.target.value)}\n              data-testid=\"input-edit-start-time\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fim\">Hora de término</Label>\n            <Input\n              id=\"fim\"\n              type=\"time\"\n              value={fim}\n              onChange={(e) => setFim(e.target.value)}\n              data-testid=\"input-edit-end-time\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"concluida\"\n              checked={concluida}\n              onCheckedChange={(checked) => setConcluida(Boolean(checked))}\n              data-testid=\"checkbox-completed\"\n            />\n            <Label htmlFor=\"concluida\" className=\"cursor-pointer\">\n              Marcar como concluída\n            </Label>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between mt-4\">\n          <div className=\"flex gap-2\">\n            <Button variant=\"destructive\" onClick={handleDelete} disabled={isSubmitting} data-testid=\"button-delete-one\">\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Excluir esta\n            </Button>\n            {onDeleteAll && (\n              <Button variant=\"destructive\" onClick={onDeleteAll} disabled={isSubmitting} data-testid=\"button-delete-all\">\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Excluir série\n              </Button>\n            )}\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={onCancel} disabled={isSubmitting} data-testid=\"button-cancel-edit\">\n              Cancelar\n            </Button>\n            <Button onClick={handleSubmit} disabled={isSubmitting} data-testid=\"button-save-edit\">\n              {isSubmitting ? \"Salvando...\" : \"Salvar\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5566},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"attached_assets/README_1760837559259.md":{"content":"# Esteira de Demandas (React + Vite + Tailwind)\n\n## Rodar local\n```bash\nnpm i\nnpm run dev\n```\n\n## Build\n```bash\nnpm run build\n# saída em dist/\n```\n\n## Deploy: Vercel / Netlify / Cloudflare Pages\n- Build: `npm run build`\n- Output: `dist/`\n- Para Netlify (SPA), já existe `public/_redirects` com `/*  /index.html  200`.\n\n## Deploy: GitHub Pages (com Actions)\n1. Crie o repositório no GitHub e faça push do código.\n2. A Action em `.github/workflows/deploy.yml` constrói e publica.\n","size_bytes":484},"client/src/components/esteira/kpi-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\n\ninterface KpiCardProps {\n  label: string;\n  value: number;\n  variant: \"default\" | \"success\" | \"danger\" | \"info\";\n}\n\nexport function KpiCard({ label, value, variant }: KpiCardProps) {\n  const colorClasses = {\n    default: \"bg-muted\",\n    success: \"bg-green-500\",\n    danger: \"bg-red-500\",\n    info: \"bg-blue-500\",\n  };\n\n  return (\n    <Card className=\"relative overflow-hidden\">\n      <div className={cn(\"absolute inset-y-0 left-0 w-1\", colorClasses[variant])} />\n      <CardContent className=\"p-4 pl-5\">\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-2\">\n          <span className={cn(\"inline-block w-2 h-2 rounded-full\", colorClasses[variant])} />\n          <span>{label}</span>\n        </div>\n        <div className=\"text-3xl font-semibold\" data-testid={`kpi-${label.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n          {value}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1008},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 217 33% 17%;\n\n  --border: 217 30% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 217 33% 17%;\n\n  --card-border: 217 30% 93%;\n\n  --sidebar: 217 25% 96%;\n\n  --sidebar-foreground: 217 33% 17%;\n\n  --sidebar-border: 217 30% 90%;\n\n  --sidebar-primary: 217 90% 50%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 217 20% 92%;\n\n  --sidebar-accent-foreground: 217 33% 17%;\n\n  --sidebar-ring: 217 90% 50%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 217 33% 17%;\n\n  --popover-border: 217 30% 88%;\n\n  --primary: 217 90% 50%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 217 20% 90%;\n\n  --secondary-foreground: 217 33% 17%;\n\n  --muted: 217 18% 94%;\n\n  --muted-foreground: 217 25% 45%;\n\n  --accent: 217 20% 92%;\n\n  --accent-foreground: 217 33% 17%;\n\n  --destructive: 0 72% 55%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 30% 78%;\n  --ring: 217 90% 50%;\n  --chart-1: 217 90% 50%;\n  --chart-2: 142 70% 45%;\n  --chart-3: 280 65% 55%;\n  --chart-4: 38 90% 50%;\n  --chart-5: 340 75% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(217 33% 17% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(217 33% 17% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(217 33% 17% / 0.06), 0px 1px 2px -1px hsl(217 33% 17% / 0.08);\n  --shadow: 0px 4px 6px -2px hsl(217 33% 17% / 0.05), 0px 2px 4px -1px hsl(217 33% 17% / 0.06);\n  --shadow-md: 0px 6px 8px -2px hsl(217 33% 17% / 0.08), 0px 4px 6px -2px hsl(217 33% 17% / 0.05);\n  --shadow-lg: 0px 10px 15px -3px hsl(217 33% 17% / 0.10), 0px 4px 6px -2px hsl(217 33% 17% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(217 33% 17% / 0.10), 0px 10px 10px -5px hsl(217 33% 17% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(217 33% 17% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 217 33% 10%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 217 30% 22%;\n\n  --card: 217 33% 14%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 217 30% 18%;\n\n  --sidebar: 217 32% 12%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 217 30% 16%;\n\n  --sidebar-primary: 217 90% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 217 28% 16%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 217 90% 60%;\n\n  --popover: 217 33% 15%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 217 30% 20%;\n\n  --primary: 217 90% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 217 28% 18%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 217 25% 16%;\n\n  --muted-foreground: 217 20% 70%;\n\n  --accent: 217 25% 17%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 72% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 217 30% 28%;\n  --ring: 217 90% 60%;\n  --chart-1: 217 90% 65%;\n  --chart-2: 142 70% 50%;\n  --chart-3: 280 65% 65%;\n  --chart-4: 38 90% 60%;\n  --chart-5: 340 75% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.45);\n  --shadow: 0px 4px 6px -2px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 6px 8px -2px hsl(0 0% 0% / 0.40), 0px 4px 6px -2px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.45), 0px 4px 6px -2px hsl(0 0% 0% / 0.30);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.50), 0px 10px 10px -5px hsl(0 0% 0% / 0.25);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11200},"client/src/pages/esteira-demandas.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport {\n  addDoc,\n  collectionGroup,\n  deleteDoc,\n  doc,\n  getDocs,\n  onSnapshot,\n  orderBy,\n  query,\n  updateDoc,\n  where,\n} from \"firebase/firestore\";\nimport { db, tasksCollection } from \"@/lib/firebase\";\nimport { dateToYMD, hhmmToMin, isHHMM } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {  ChevronLeft, ChevronRight, Plus } from \"lucide-react\";\nimport type { Task, RecKind } from \"@shared/schema\";\nimport { RESPONSAVEIS, OPERACOES } from \"@shared/schema\";\nimport { TaskModal } from \"@/components/esteira/task-modal\";\nimport { EditModal } from \"@/components/esteira/edit-modal\";\nimport { KpiCard } from \"@/components/esteira/kpi-card\";\nimport { VolumeCard } from \"@/components/esteira/volume-card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst HORIZON_DAYS = 30;\nconst WEEKS_COUNT = 8;\n\nexport default function EsteiraDemandas() {\n  const params = new URLSearchParams(window.location.search);\n  const ws = params.get(\"ws\") || \"demo\";\n\n  const [selectedDate, setSelectedDate] = useState(() => dateToYMD(new Date()));\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filterResp, setFilterResp] = useState<string>(\"(todos)\");\n  const [filterOp, setFilterOp] = useState<string>(\"(todas)\");\n  const [showNew, setShowNew] = useState(false);\n  const [editing, setEditing] = useState<Task | null>(null);\n\n  // Load tasks for selected date\n  useEffect(() => {\n    const qy = query(tasksCollection(ws, selectedDate), orderBy(\"inicio\"));\n    return onSnapshot(qy, (snap) => {\n      const list: Task[] = [];\n      snap.forEach((d) => {\n        const data = d.data() as any;\n        const ini = data?.inicio;\n        const fim = data?.fim;\n        if (!isHHMM(ini) || !isHHMM(fim)) return;\n        list.push({\n          id: d.id,\n          titulo: String(data?.titulo ?? \"Demanda\"),\n          inicio: ini,\n          fim: fim,\n          concluida: Boolean(data?.concluida),\n          responsavel: String(data?.responsavel ?? \"\"),\n          operacao: String(data?.operacao ?? \"\"),\n          ymd: String(data?.ymd ?? selectedDate),\n          seriesId: data?.seriesId,\n          recKind: (data?.recKind ?? \"once\") as RecKind,\n          workspaceId: String(data?.workspaceId ?? ws),\n          createdAt: Number(data?.createdAt ?? Date.now()),\n        });\n      });\n      setTasks(list);\n    });\n  }, [ws, selectedDate]);\n\n  // CRUD operations\n  async function addOne(input: Omit<Task, \"id\" | \"workspaceId\" | \"createdAt\">) {\n    const docData: any = {\n      titulo: input.titulo,\n      inicio: input.inicio,\n      fim: input.fim,\n      concluida: Boolean(input.concluida),\n      responsavel: input.responsavel,\n      operacao: input.operacao,\n      ymd: input.ymd,\n      recKind: input.recKind || \"once\",\n      workspaceId: ws,\n      createdAt: Date.now(),\n    };\n    if (input.seriesId) docData.seriesId = input.seriesId;\n    await addDoc(tasksCollection(ws, input.ymd), docData);\n  }\n\n  function generateOccurrences(kind: RecKind | undefined, startYmd: string, weekDay?: number): string[] {\n    const occs: string[] = [];\n    const d0 = new Date(startYmd);\n\n    if (!kind || kind === \"once\") {\n      occs.push(startYmd);\n      return occs;\n    }\n\n    if (kind === \"daily\") {\n      for (let i = 0; i < HORIZON_DAYS; i++) {\n        const d = new Date(d0);\n        d.setDate(d0.getDate() + i);\n        occs.push(dateToYMD(d));\n      }\n      return occs;\n    }\n\n    if (kind === \"weekly\") {\n      if (weekDay !== undefined) {\n        const currentDay = d0.getDay();\n        const daysUntilTarget = (weekDay - currentDay + 7) % 7;\n        const firstOccurrence = new Date(d0);\n        firstOccurrence.setDate(d0.getDate() + daysUntilTarget);\n\n        for (let w = 0; w < WEEKS_COUNT; w++) {\n          const d = new Date(firstOccurrence);\n          d.setDate(firstOccurrence.getDate() + w * 7);\n          occs.push(dateToYMD(d));\n        }\n      } else {\n        for (let w = 0; w < WEEKS_COUNT; w++) {\n          const d = new Date(d0);\n          d.setDate(d0.getDate() + w * 7);\n          occs.push(dateToYMD(d));\n        }\n      }\n    }\n    return occs;\n  }\n\n  async function addTaskWithRecurrence(base: Omit<Task, \"id\" | \"workspaceId\" | \"createdAt\">, weekDay?: number) {\n    const seriesId = base.recKind && base.recKind !== \"once\" ? crypto.randomUUID() : undefined;\n    const occs = generateOccurrences(base.recKind, base.ymd, weekDay);\n\n    await Promise.all(\n      occs.map((ymd) =>\n        addOne({\n          ...base,\n          ymd,\n          seriesId,\n        })\n      )\n    );\n  }\n\n  async function updateTaskSafe(tid: string, ymd: string, patch: Partial<Task>) {\n    const clean: any = {};\n    Object.entries(patch).forEach(([k, v]) => {\n      if (v !== undefined) clean[k] = v;\n    });\n    await updateDoc(doc(tasksCollection(ws, ymd), tid), clean);\n  }\n\n  async function deleteTaskOne(tid: string, ymd: string) {\n    await deleteDoc(doc(tasksCollection(ws, ymd), tid));\n  }\n\n  async function deleteAllOccurrences(seriesId: string) {\n    try {\n      const qy = query(\n        collectionGroup(db, \"tasks\"),\n        where(\"workspaceId\", \"==\", ws),\n        where(\"seriesId\", \"==\", seriesId)\n      );\n\n      const snap = await getDocs(qy);\n\n      if (snap.docs.length === 0) {\n        alert(\"Nenhuma ocorrência encontrada para excluir.\");\n        return;\n      }\n\n      await Promise.all(snap.docs.map((d) => deleteDoc(d.ref)));\n      alert(`${snap.docs.length} ocorrência(s) excluída(s) com sucesso!`);\n    } catch (error: any) {\n      console.error(\"Erro ao excluir todas as ocorrências:\", error);\n      const errorMessage = error?.message || String(error);\n      alert(`Erro ao excluir: ${errorMessage}`);\n    }\n  }\n\n  // Filters and stats\n  const filteredTasks = useMemo(() => {\n    return tasks.filter((t) => {\n      const okResp = filterResp === \"(todos)\" || t.responsavel === filterResp;\n      const okOp = filterOp === \"(todas)\" || t.operacao === filterOp;\n      return okResp && okOp;\n    });\n  }, [tasks, filterResp, filterOp]);\n\n  const stats = useMemo(() => {\n    const nowMin = hhmmToMin(new Date().toTimeString().slice(0, 5));\n    let c = 0, a = 0, p = 0;\n    filteredTasks.forEach((t) => {\n      if (t.concluida) c++;\n      else if (hhmmToMin(t.fim) <= nowMin) a++;\n      else p++;\n    });\n    return { total: filteredTasks.length, concluida: c, atrasada: a, noPrazo: p };\n  }, [filteredTasks]);\n\n  const volumetriaPorResp = useMemo(() => {\n    const map = new Map<string, number>();\n    filteredTasks.forEach((t) => map.set(t.responsavel, (map.get(t.responsavel) || 0) + 1));\n    return Array.from(map.entries()).sort((a, b) => a[0].localeCompare(b[0]));\n  }, [filteredTasks]);\n\n  const responsaveisVisiveis = useMemo(() => {\n    return filterResp === \"(todos)\" ? RESPONSAVEIS : RESPONSAVEIS.filter((r) => r === filterResp);\n  }, [filterResp]);\n\n  function shiftDate(days: number) {\n    const d = new Date(selectedDate);\n    d.setDate(d.getDate() + days);\n    setSelectedDate(dateToYMD(d));\n  }\n\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-wrap items-center gap-3 justify-between\">\n          <h1 className=\"text-3xl font-semibold\">Esteira de Demandas</h1>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => shiftDate(-1)}\n              data-testid=\"button-prev-day\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"bg-background border border-input rounded-md px-3 py-2 text-sm\"\n              data-testid=\"input-date\"\n            />\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => shiftDate(1)}\n              data-testid=\"button-next-day\"\n            >\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n            <Button onClick={() => setShowNew(true)} data-testid=\"button-new-demand\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nova demanda\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-wrap gap-3\">\n          <div className=\"space-y-1\">\n            <label className=\"text-sm text-muted-foreground\">Responsável</label>\n            <Select value={filterResp} onValueChange={setFilterResp}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-responsible\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"(todos)\">(todos)</SelectItem>\n                {RESPONSAVEIS.map((r) => (\n                  <SelectItem key={r} value={r}>\n                    {r}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"space-y-1\">\n            <label className=\"text-sm text-muted-foreground\">Operação</label>\n            <Select value={filterOp} onValueChange={setFilterOp}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-operation\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"(todas)\">(todas)</SelectItem>\n                {OPERACOES.map((o) => (\n                  <SelectItem key={o} value={o}>\n                    {o}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* KPIs */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <KpiCard label=\"Demandas no dia\" value={stats.total} variant=\"default\" />\n          <KpiCard label=\"Concluídas\" value={stats.concluida} variant=\"success\" />\n          <KpiCard label=\"Atrasadas\" value={stats.atrasada} variant=\"danger\" />\n          <KpiCard label=\"No prazo\" value={stats.noPrazo} variant=\"info\" />\n        </div>\n\n        {/* Volumetry */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <VolumeCard title=\"Por responsável\" rows={volumetriaPorResp} />\n        </div>\n\n        {/* Kanban Columns */}\n        <div className=\"grid gap-4\" style={{ gridTemplateColumns: `repeat(${responsaveisVisiveis.length}, minmax(0, 1fr))` }}>\n          {responsaveisVisiveis.map((resp) => {\n            const list = filteredTasks\n              .filter((t) => t.responsavel === resp)\n              .sort((a, b) =>\n                hhmmToMin(a.inicio) - hhmmToMin(b.inicio) ||\n                hhmmToMin(a.fim) - hhmmToMin(b.fim) ||\n                a.titulo.localeCompare(b.titulo)\n              );\n\n            return (\n              <Card key={resp} className=\"overflow-hidden\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">{resp}</CardTitle>\n                    <Badge variant=\"secondary\" data-testid={`count-${resp}`}>\n                      {list.length}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {list.length === 0 && (\n                    <p className=\"text-sm text-muted-foreground\">Sem demandas neste dia</p>\n                  )}\n\n                  {list.map((t) => {\n                    let badge = \"NO PRAZO\";\n                    let badgeVariant: \"default\" | \"secondary\" | \"destructive\" | \"outline\" = \"default\";\n                    const nowMin = hhmmToMin(new Date().toTimeString().slice(0, 5));\n                    if (t.concluida) {\n                      badge = \"CONCLUÍDA\";\n                      badgeVariant = \"secondary\";\n                    } else if (hhmmToMin(t.fim) <= nowMin) {\n                      badge = \"ATRASADA\";\n                      badgeVariant = \"destructive\";\n                    }\n\n                    return (\n                      <button\n                        key={t.id}\n                        onClick={() => setEditing(t)}\n                        className=\"w-full text-left rounded-lg bg-card hover-elevate active-elevate-2 border border-card-border p-3 space-y-2\"\n                        data-testid={`task-${t.id}`}\n                      >\n                        <div className=\"flex items-center justify-between gap-2\">\n                          <Badge variant={badgeVariant} className=\"text-[10px] uppercase\">\n                            {badge}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {t.inicio} – {t.fim}\n                          </span>\n                        </div>\n                        <div className=\"font-medium text-sm\">{t.titulo}</div>\n                        {t.operacao && (\n                          <div className=\"text-xs text-muted-foreground\">Operação: {t.operacao}</div>\n                        )}\n                      </button>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Modals */}\n      {showNew && (\n        <TaskModal\n          title=\"Nova demanda\"\n          onCancel={() => setShowNew(false)}\n          onSubmit={async (payload) => {\n            try {\n              await addTaskWithRecurrence(\n                {\n                  titulo: payload.titulo.trim() || \"Demanda\",\n                  inicio: payload.inicio,\n                  fim: payload.fim,\n                  concluida: false,\n                  responsavel: payload.responsavel,\n                  operacao: payload.operacao,\n                  ymd: selectedDate,\n                  recKind: payload.recKind,\n                  seriesId: undefined,\n                  workspaceId: ws,\n                  createdAt: Date.now(),\n                } as any,\n                payload.weekDay\n              );\n              setShowNew(false);\n            } catch (e: any) {\n              alert(`Não foi possível salvar a demanda.\\n${String(e?.message || e)}`);\n            }\n          }}\n        />\n      )}\n\n      {editing && (\n        <EditModal\n          task={editing}\n          onCancel={() => setEditing(null)}\n          onDeleteOne={async () => {\n            await deleteTaskOne(editing.id, editing.ymd);\n            setEditing(null);\n          }}\n          onDeleteAll={\n            editing.seriesId\n              ? async () => {\n                  if (confirm(\"Excluir TODAS as ocorrências desta demanda recorrente?\")) {\n                    try {\n                      await deleteAllOccurrences(editing.seriesId!);\n                      setEditing(null);\n                    } catch (error: any) {\n                      console.error(\"Erro ao excluir todas as ocorrências:\", error);\n                      alert(`Erro: ${error?.message || error}`);\n                    }\n                  }\n                }\n              : undefined\n          }\n          onSubmit={async (patch) => {\n            await updateTaskSafe(editing.id, editing.ymd, patch);\n            setEditing(null);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":15619},"client/src/components/dashboard/charts-section.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { TicketStats } from \"@shared/schema\";\nimport { \n  BarChart, \n  Bar, \n  LineChart,\n  Line,\n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer, \n  PieChart, \n  Pie, \n  Cell, \n  Legend \n} from \"recharts\";\nimport { GLPI_STATUS, GLPI_PRIORITY } from \"@shared/schema\";\n\ninterface ChartsSectionProps {\n  stats?: TicketStats;\n  isLoading: boolean;\n}\n\nconst STATUS_COLORS = {\n  1: \"#3b82f6\", // blue\n  2: \"#eab308\", // yellow\n  3: \"#f97316\", // orange\n  4: \"#22c55e\", // green\n  5: \"#6b7280\", // gray\n  6: \"#64748b\", // dark gray\n};\n\nconst PRIORITY_COLORS = {\n  1: \"#94a3b8\",\n  2: \"#64748b\",\n  3: \"#3b82f6\",\n  4: \"#eab308\",\n  5: \"#f97316\",\n  6: \"#ef4444\",\n};\n\nexport function ChartsSection({ stats, isLoading }: ChartsSectionProps) {\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 gap-6\">\n          {[...Array(1)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-5 w-48\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-80 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-5 w-32\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-64 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!stats) return null;\n\n  const statusData = stats.byStatus\n    .map((item) => ({\n      name: GLPI_STATUS[item.status as keyof typeof GLPI_STATUS] || `Status ${item.status}`,\n      value: item.count,\n      status: item.status,\n    }))\n    .filter((item) => item.value > 0);\n\n  const priorityData = stats.byPriority\n    .map((item) => ({\n      name: GLPI_PRIORITY[item.priority as keyof typeof GLPI_PRIORITY] || `Prioridade ${item.priority}`,\n      value: item.count,\n      priority: item.priority,\n    }))\n    .filter((item) => item.value > 0);\n\n  // Timeline comparison data (opened vs closed)\n  const timelineComparisonData = stats.timelineComparison?.slice(-30) || []; // Last 30 days\n\n  // Top requesters data\n  const topRequestersData = stats.topRequesters?.slice(0, 10) || [];\n\n  // Categories data\n  const categoriesData = stats.byCategory?.slice(0, 10) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Timeline Comparison Chart - Full Width */}\n      {timelineComparisonData.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Tickets Abertos vs Fechados (Últimos 30 dias)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <LineChart data={timelineComparisonData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"date\" \n                  angle={-45} \n                  textAnchor=\"end\" \n                  height={80}\n                  tickFormatter={(value) => {\n                    const date = new Date(value);\n                    return `${date.getDate()}/${date.getMonth() + 1}`;\n                  }}\n                />\n                <YAxis />\n                <Tooltip \n                  labelFormatter={(value) => {\n                    const date = new Date(value);\n                    return date.toLocaleDateString('pt-BR');\n                  }}\n                />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"opened\" \n                  stroke=\"#3b82f6\" \n                  strokeWidth={2}\n                  name=\"Abertos\"\n                  dot={{ r: 3 }}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"closed\" \n                  stroke=\"#22c55e\" \n                  strokeWidth={2}\n                  name=\"Fechados\"\n                  dot={{ r: 3 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* 2x2 Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Status Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Distribuição por Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={statusData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {statusData.map((entry, index) => (\n                    <Cell\n                      key={`cell-${index}`}\n                      fill={STATUS_COLORS[entry.status as keyof typeof STATUS_COLORS] || \"#94a3b8\"}\n                    />\n                  ))}\n                </Pie>\n                <Tooltip />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Priority Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Tickets por Prioridade</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={priorityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={100} />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"value\" fill=\"#8884d8\">\n                  {priorityData.map((entry, index) => (\n                    <Cell\n                      key={`cell-${index}`}\n                      fill={PRIORITY_COLORS[entry.priority as keyof typeof PRIORITY_COLORS] || \"#94a3b8\"}\n                    />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Top Requesters */}\n        {topRequestersData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Top 10 Solicitantes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={topRequestersData} layout=\"vertical\">\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis type=\"number\" />\n                  <YAxis \n                    dataKey=\"userName\" \n                    type=\"category\" \n                    width={150}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#8b5cf6\" name=\"Tickets\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Categories */}\n        {categoriesData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Top 10 Categorias</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={categoriesData} layout=\"vertical\">\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis type=\"number\" />\n                  <YAxis \n                    dataKey=\"categoryName\" \n                    type=\"category\" \n                    width={150}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#06b6d4\" name=\"Tickets\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8349},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261}},"version":2}